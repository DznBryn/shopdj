window.object_name = "sharkm0de",
  function (factory) {
    if ("function" == typeof define && define.amd) {
      define(factory);
    } else {
      if ("object" == typeof exports) {
        module.exports = factory();
      } else {
        var _jQuery = window.Cookies;
        var jQuery = window.Cookies = factory();
        /**
         * @return {?}
         */
        jQuery.noConflict = function () {
          return window.Cookies = _jQuery, jQuery;
        };
      }
    }
  }(function () {
    /**
     * @return {?}
     */
    function merge() {
      /** @type {number} */
      var i = 0;
      var object = {};
      for (; i < arguments.length; i++) {
        var iterable = arguments[i];
        var key;
        for (key in iterable) {
          object[key] = iterable[key];
        }
      }
      return object;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    function makeObject(fn) {
      /**
       * @param {string} name
       * @param {string} value
       * @param {Object} opt
       * @return {?}
       */
      function set(name, value, opt) {
        var result;
        if (arguments.length > 1) {
          if (opt = merge({
              path: "/"
            }, set.defaults, opt), "number" == typeof opt.expires) {
            /** @type {Date} */
            var d = new Date;
            d.setMilliseconds(d.getMilliseconds() + 864E5 * opt.expires);
            /** @type {Date} */
            opt.expires = d;
          }
          try {
            /** @type {string} */
            result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              /** @type {string} */
              value = result;
            }
          } catch (l) {}
          return value = encodeURIComponent(String(value)), value = value.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), name = encodeURIComponent(String(name)), name = name.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent), name = name.replace(/[\(\)]/g, escape), document.cookie = [name, "=", value, opt.expires && "; expires=" + opt.expires.toUTCString(), opt.path && "; path=" + opt.path, opt.domain && "; domain=" + opt.domain, opt.secure ? "; secure" :
            ""
          ].join("");
        }
        if (!name) {
          result = {};
        }
        /** @type {Array} */
        var codeSegments = document.cookie ? document.cookie.split("; ") : [];
        /** @type {RegExp} */
        var r20 = /(%[0-9A-Z]{2})+/g;
        /** @type {number} */
        var i = 0;
        for (; i < codeSegments.length; i++) {
          var split = codeSegments[i].split("=");
          var key = split[0].replace(r20, decodeURIComponent);
          var res = split.slice(1).join("=");
          if ('"' === res.charAt(0)) {
            res = res.slice(1, -1);
          }
          try {
            if (res = fn && fn(res, key) || res.replace(r20, decodeURIComponent), this.json) {
              try {
                /** @type {*} */
                res = JSON.parse(res);
              } catch (l) {}
            }
            if (name === key) {
              /** @type {*} */
              result = res;
              break;
            }
            if (!name) {
              /** @type {*} */
              result[key] = res;
            }
          } catch (l) {}
        }
        return result;
      }
      return set.get = set.set = set, set.getJSON = function () {
        return set.apply({
          json: true
        }, [].slice.call(arguments));
      }, set.defaults = {}, set.remove = function (name, options) {
        set(name, "", merge(options, {
          expires: -1
        }));
      }, set.withConverter = makeObject, set;
    }
    return makeObject();
  }),
  function () {
    var previousUnderscore;
    var root;
    previousUnderscore = function () {
      /**
       * @param {Object} data
       * @param {Object} dataSourceUrl
       * @return {undefined}
       */
      function Query(data, dataSourceUrl) {
        var key;
        var value;
        if (this.options = {
            target: "instafeed",
            get: "popular",
            resolution: "thumbnail",
            sortBy: "none",
            links: true,
            mock: false,
            useHttp: false
          }, "object" == typeof data) {
          for (key in data) {
            value = data[key];
            this.options[key] = value;
          }
        }
        this.context = null != dataSourceUrl ? dataSourceUrl : this;
        this.unique = this._genKey();
      }
      return Query.prototype.hasNext = function () {
        return "string" == typeof this.context.nextUrl && this.context.nextUrl.length > 0;
      }, Query.prototype.next = function () {
        return this.hasNext() ? this.run(this.context.nextUrl) : false;
      }, Query.prototype.run = function (src) {
        var head;
        var j;
        var js;
        if ("string" != typeof this.options.clientId && "string" != typeof this.options.accessToken) {
          throw new Error("Missing clientId or accessToken.");
        }
        if ("string" != typeof this.options.accessToken && "string" != typeof this.options.clientId) {
          throw new Error("Missing clientId or accessToken.");
        }
        return null != this.options.before && ("function" == typeof this.options.before && this.options.before.call(this)), "undefined" != typeof document && (null !== document && (js = document.createElement("script"), js.id = "instafeed-fetcher", js.src = src || this._buildUrl(), head = document.getElementsByTagName("head"), head[0].appendChild(js), j = "instafeedCache" + this.unique, window[j] = new Query(this.options, this), window[j].unique = this.unique)), true;
      }, Query.prototype.parse = function (data) {
        var a;
        var li;
        var p;
        var val;
        var item;
        var separator;
        var url;
        var value;
        var img;
        var expires;
        var unique;
        var b;
        var camelKey;
        var least;
        var elem;
        var itemIndex;
        var i;
        var _i;
        var ln;
        var len;
        var _len;
        var rawParams;
        if ("object" != typeof data) {
          if (null != this.options.error && "function" == typeof this.options.error) {
            return this.options.error.call(this, "Invalid JSON data"), false;
          }
          throw new Error("Invalid JSON response");
        }
        if (200 !== data.meta.code) {
          if (null != this.options.error && "function" == typeof this.options.error) {
            return this.options.error.call(this, data.meta.error_message), false;
          }
          throw new Error("Error from Instagram: " + data.meta.error_message);
        }
        if (0 === data.data.length) {
          if (null != this.options.error && "function" == typeof this.options.error) {
            return this.options.error.call(this, "No images were returned from Instagram"), false;
          }
          throw new Error("No images were returned from Instagram");
        }
        if (null != this.options.success && ("function" == typeof this.options.success && this.options.success.call(this, data)), this.context.nextUrl = "", null != data.pagination && (this.context.nextUrl = data.pagination.next_url), "none" !== this.options.sortBy) {
          switch (least = "random" === this.options.sortBy ? ["", "random"] : this.options.sortBy.split("-"), camelKey = "least" === least[0] ? true : false, least[1]) {
            case "random":
              data.data.sort(function () {
                return 0.5 - Math.random();
              });
              break;
            case "recent":
              data.data = this._sortBy(data.data, "created_time", camelKey);
              break;
            case "liked":
              data.data = this._sortBy(data.data, "likes.count", camelKey);
              break;
            case "commented":
              data.data = this._sortBy(data.data, "comments.count", camelKey);
              break;
            default:
              throw new Error("Invalid option for sortBy: '" + this.options.sortBy + "'.");;
          }
        }
        if ("undefined" != typeof document && (null !== document && this.options.mock === false)) {
          if (value = data.data, null != this.options.limit && (value.length > this.options.limit && (value = value.slice(0, this.options.limit + 1 || 9E9))), li = document.createDocumentFragment(), null != this.options.filter && ("function" == typeof this.options.filter && (value = this._filter(value, this.options.filter))), null != this.options.template && "string" == typeof this.options.template) {
            /** @type {string} */
            val = "";
            /** @type {string} */
            separator = "";
            /** @type {string} */
            expires = "";
            /** @type {Element} */
            elem = document.createElement("div");
            /** @type {number} */
            itemIndex = 0;
            ln = value.length;
            for (; ln > itemIndex; itemIndex++) {
              item = value[itemIndex];
              url = item.images[this.options.resolution].url;
              if (!this.options.useHttp) {
                url = url.replace("http://", "//");
              }
              separator = this._makeTemplate(this.options.template, {
                model: item,
                id: item.id,
                link: item.link,
                image: url,
                caption: this._getObjectProperty(item, "caption.text"),
                likes: item.likes.count,
                comments: item.comments.count,
                location: this._getObjectProperty(item, "location.name")
              });
              val += separator;
            }
            /** @type {string} */
            elem.innerHTML = val;
            /** @type {Array.<?>} */
            rawParams = [].slice.call(elem.childNodes);
            /** @type {number} */
            i = 0;
            /** @type {number} */
            len = rawParams.length;
            for (; len > i; i++) {
              b = rawParams[i];
              li.appendChild(b);
            }
          } else {
            /** @type {number} */
            _i = 0;
            _len = value.length;
            for (; _len > _i; _i++) {
              item = value[_i];
              /** @type {Element} */
              img = document.createElement("img");
              url = item.images[this.options.resolution].url;
              if (!this.options.useHttp) {
                url = url.replace("http://", "//");
              }
              img.src = url;
              if (this.options.links === true) {
                /** @type {Element} */
                a = document.createElement("a");
                a.href = item.link;
                a.appendChild(img);
                li.appendChild(a);
              } else {
                li.appendChild(img);
              }
            }
          }
          document.getElementById(this.options.target).appendChild(li);
          p = document.getElementsByTagName("head")[0];
          p.removeChild(document.getElementById("instafeed-fetcher"));
          /** @type {string} */
          unique = "instafeedCache" + this.unique;
          window[unique] = void 0;
          try {
            delete window[unique];
          } catch (C) {}
        }
        return null != this.options.after && ("function" == typeof this.options.after && this.options.after.call(this)), true;
      }, Query.prototype._buildUrl = function () {
        var regex;
        var last;
        var str;
        switch (regex = "https://api.instagram.com/v1", this.options.get) {
          case "popular":
            /** @type {string} */
            last = "media/popular";
            break;
          case "tagged":
            if ("string" != typeof this.options.tagName) {
              throw new Error("No tag name specified. Use the 'tagName' option.");
            }
            /** @type {string} */
            last = "tags/" + this.options.tagName + "/media/recent";
            break;
          case "location":
            if ("number" != typeof this.options.locationId) {
              throw new Error("No location specified. Use the 'locationId' option.");
            }
            /** @type {string} */
            last = "locations/" + this.options.locationId + "/media/recent";
            break;
          case "user":
            if ("number" != typeof this.options.userId) {
              throw new Error("No user specified. Use the 'userId' option.");
            }
            if ("string" != typeof this.options.accessToken) {
              throw new Error("No access token. Use the 'accessToken' option.");
            }
            /** @type {string} */
            last = "users/" + this.options.userId + "/media/recent";
            break;
          default:
            throw new Error("Invalid option for get: '" + this.options.get + "'.");;
        }
        return str = "" + regex + "/" + last, str += null != this.options.accessToken ? "?access_token=" + this.options.accessToken : "?client_id=" + this.options.clientId, null != this.options.limit && (str += "&count=" + this.options.limit), str += "&callback=instafeedCache" + this.unique + ".parse";
      }, Query.prototype._genKey = function () {
        var S4;
        return S4 = function () {
          return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
        }, "" + S4() + S4() + S4() + S4();
      }, Query.prototype._makeTemplate = function (dataAndEvents, walkers) {
        var requestUrl;
        var rCurrLoc;
        var pdataOld;
        var space;
        var pdataCur;
        /** @type {RegExp} */
        rCurrLoc = /(?:\{{2})([\w\[\]\.]+)(?:\}{2})/;
        /** @type {(Function|string)} */
        requestUrl = dataAndEvents;
        for (; rCurrLoc.test(requestUrl);) {
          pdataOld = requestUrl.match(rCurrLoc)[1];
          space = null != (pdataCur = this._getObjectProperty(walkers, pdataOld)) ? pdataCur : "";
          requestUrl = requestUrl.replace(rCurrLoc, "" + space);
        }
        return requestUrl;
      }, Query.prototype._getObjectProperty = function (obj, value) {
        var part;
        var pathConfig;
        value = value.replace(/\[(\w+)\]/g, ".$1");
        pathConfig = value.split(".");
        for (; pathConfig.length;) {
          if (part = pathConfig.shift(), !(null != obj && part in obj)) {
            return null;
          }
          obj = obj[part];
        }
        return obj;
      }, Query.prototype._sortBy = function (d, q, key) {
        var trigger;
        return trigger = function (obj, extra) {
          var r;
          var e;
          return r = this._getObjectProperty(obj, q), e = this._getObjectProperty(extra, q), key ? r > e ? 1 : -1 : e > r ? 1 : -1;
        }, d.sort(trigger.bind(this)), d;
      }, Query.prototype._filter = function (models, forOwn) {
        var content;
        var which;
        var getEnumerableProperties;
        var i;
        var l;
        /** @type {Array} */
        content = [];
        /**
         * @param {?} object
         * @return {?}
         */
        getEnumerableProperties = function (object) {
          return forOwn(object) ? content.push(object) : void 0;
        };
        /** @type {number} */
        i = 0;
        l = models.length;
        for (; l > i; i++) {
          which = models[i];
          getEnumerableProperties(which);
        }
        return content;
      }, Query;
    }();
    root = "undefined" != typeof exports && null !== exports ? exports : window;
    root.Instafeed = previousUnderscore;
  }.call(this), jQuery.easing.jswing = jQuery.easing.swing, jQuery.extend(jQuery.easing, {
    def: "easeOutQuad",
    /**
     * @param {?} diff
     * @param {?} p
     * @param {?} n
     * @param {?} firstNum
     * @param {?} swing
     * @return {?}
     */
    swing: function (diff, p, n, firstNum, swing) {
      return jQuery.easing[jQuery.easing.def](diff, p, n, firstNum, swing);
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} cx
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInQuad: function (b, t, cx, c, d) {
      return c * (t /= d) * t + cx;
    },
    /**
     * @param {?} b
     * @param {number} time
     * @param {number} x
     * @param {?} diff
     * @param {number} dur
     * @return {?}
     */
    easeOutQuad: function (b, time, x, diff, dur) {
      return -diff * (time /= dur) * (time - 2) + x;
    },
    /**
     * @param {?} b
     * @param {number} time
     * @param {number} beg
     * @param {number} diff
     * @param {number} dur
     * @return {?}
     */
    easeInOutQuad: function (b, time, beg, diff, dur) {
      return (time /= dur / 2) < 1 ? diff / 2 * time * time + beg : -diff / 2 * (--time * (time - 2) - 1) + beg;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} cx
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInCubic: function (b, t, cx, c, d) {
      return c * (t /= d) * t * t + cx;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} beg
     * @param {number} diff
     * @param {number} d
     * @return {?}
     */
    easeOutCubic: function (b, t, beg, diff, d) {
      return diff * ((t = t / d - 1) * t * t + 1) + beg;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} c
     * @param {number} x
     * @param {number} d
     * @return {?}
     */
    easeInOutCubic: function (b, t, c, x, d) {
      return (t /= d / 2) < 1 ? x / 2 * t * t * t + c : x / 2 * ((t -= 2) * t * t + 2) + c;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} cx
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInQuart: function (b, t, cx, c, d) {
      return c * (t /= d) * t * t * t + cx;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} c
     * @param {?} x
     * @param {number} d
     * @return {?}
     */
    easeOutQuart: function (b, t, c, x, d) {
      return -x * ((t = t / d - 1) * t * t * t - 1) + c;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} c
     * @param {number} d
     * @param {number} x
     * @return {?}
     */
    easeInOutQuart: function (b, t, c, d, x) {
      return (t /= x / 2) < 1 ? d / 2 * t * t * t * t + c : -d / 2 * ((t -= 2) * t * t * t - 2) + c;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} cx
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInQuint: function (b, t, cx, c, d) {
      return c * (t /= d) * t * t * t * t + cx;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} beg
     * @param {number} diff
     * @param {number} d
     * @return {?}
     */
    easeOutQuint: function (b, t, beg, diff, d) {
      return diff * ((t = t / d - 1) * t * t * t * t + 1) + beg;
    },
    /**
     * @param {?} x
     * @param {number} time
     * @param {number} beg
     * @param {number} diff
     * @param {number} dur
     * @return {?}
     */
    easeInOutQuint: function (x, time, beg, diff, dur) {
      return (time /= dur / 2) < 1 ? diff / 2 * time * time * time * time * time + beg : diff / 2 * ((time -= 2) * time * time * time * time + 2) + beg;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {?} h
     * @param {number} x
     * @param {number} d
     * @return {?}
     */
    easeInSine: function (b, t, h, x, d) {
      return -x * Math.cos(t / d * (Math.PI / 2)) + x + h;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} beg
     * @param {number} diff
     * @param {number} d
     * @return {?}
     */
    easeOutSine: function (b, t, beg, diff, d) {
      return diff * Math.sin(t / d * (Math.PI / 2)) + beg;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} c
     * @param {?} dataAndEvents
     * @param {number} d
     * @return {?}
     */
    easeInOutSine: function (b, t, c, dataAndEvents, d) {
      return -dataAndEvents / 2 * (Math.cos(Math.PI * t / d) - 1) + c;
    },
    /**
     * @param {?} pos
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInExpo: function (pos, t, b, c, d) {
      return 0 == t ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    /**
     * @param {?} x
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeOutExpo: function (x, t, b, c, d) {
      return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
    },
    /**
     * @param {?} pos
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInOutExpo: function (pos, t, b, c, d) {
      return 0 == t ? b : t == d ? b + c : (t /= d / 2) < 1 ? c / 2 * Math.pow(2, 10 * (t - 1)) + b : c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    /**
     * @param {?} pos
     * @param {number} t
     * @param {number} b
     * @param {?} x
     * @param {number} d
     * @return {?}
     */
    easeInCirc: function (pos, t, b, x, d) {
      return -x * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} beg
     * @param {number} diff
     * @param {number} d
     * @return {?}
     */
    easeOutCirc: function (b, t, beg, diff, d) {
      return diff * Math.sqrt(1 - (t = t / d - 1) * t) + beg;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} x
     * @param {number} dataAndEvents
     * @param {number} d
     * @return {?}
     */
    easeInOutCirc: function (b, t, x, dataAndEvents, d) {
      return (t /= d / 2) < 1 ? -dataAndEvents / 2 * (Math.sqrt(1 - t * t) - 1) + x : dataAndEvents / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + x;
    },
    /**
     * @param {?} t
     * @param {number} x
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInElastic: function (t, x, b, c, d) {
      /** @type {number} */
      var s = 1.70158;
      /** @type {number} */
      var p = 0;
      /** @type {number} */
      var a = c;
      if (0 == x) {
        return b;
      }
      if (1 == (x /= d)) {
        return b + c;
      }
      if (p || (p = 0.3 * d), a < Math.abs(c)) {
        /** @type {number} */
        a = c;
        /** @type {number} */
        s = p / 4;
      } else {
        /** @type {number} */
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
      return -(a * Math.pow(2, 10 * (x -= 1)) * Math.sin((x * d - s) * (2 * Math.PI) / p)) + b;
    },
    /**
     * @param {?} x
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeOutElastic: function (x, t, b, c, d) {
      /** @type {number} */
      var s = 1.70158;
      /** @type {number} */
      var p = 0;
      /** @type {number} */
      var a = c;
      if (0 == t) {
        return b;
      }
      if (1 == (t /= d)) {
        return b + c;
      }
      if (p || (p = 0.3 * d), a < Math.abs(c)) {
        /** @type {number} */
        a = c;
        /** @type {number} */
        s = p / 4;
      } else {
        /** @type {number} */
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
    },
    /**
     * @param {?} a
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInOutElastic: function (a, t, b, c, d) {
      /** @type {number} */
      var s = 1.70158;
      /** @type {number} */
      var p = 0;
      /** @type {number} */
      var n = c;
      if (0 == t) {
        return b;
      }
      if (2 == (t /= d / 2)) {
        return b + c;
      }
      if (p || (p = d * (0.3 * 1.5)), n < Math.abs(c)) {
        /** @type {number} */
        n = c;
        /** @type {number} */
        s = p / 4;
      } else {
        /** @type {number} */
        s = p / (2 * Math.PI) * Math.asin(c / n);
      }
      return 1 > t ? -0.5 * (n * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b : n * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} d
     * @param {number} c
     * @param {number} steps
     * @param {number} s
     * @return {?}
     */
    easeInBack: function (b, t, d, c, steps, s) {
      return void 0 == s && (s = 1.70158), c * (t /= steps) * t * ((s + 1) * t - s) + d;
    },
    /**
     * @param {?} b
     * @param {number} t
     * @param {number} x
     * @param {number} d
     * @param {number} c
     * @param {number} s
     * @return {?}
     */
    easeOutBack: function (b, t, x, d, c, s) {
      return void 0 == s && (s = 1.70158), d * ((t = t / c - 1) * t * ((s + 1) * t + s) + 1) + x;
    },
    /**
     * @param {?} b
     * @param {number} pos
     * @param {number} d
     * @param {number} t
     * @param {number} x
     * @param {number} s
     * @return {?}
     */
    easeInOutBack: function (b, pos, d, t, x, s) {
      return void 0 == s && (s = 1.70158), (pos /= x / 2) < 1 ? t / 2 * (pos * pos * (((s *= 1.525) + 1) * pos - s)) + d : t / 2 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2) + d;
    },
    /**
     * @param {?} x
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInBounce: function (x, t, b, c, d) {
      return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    /**
     * @param {?} v00
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeOutBounce: function (v00, t, b, c, d) {
      return (t /= d) < 1 / 2.75 ? c * (7.5625 * t * t) + b : 2 / 2.75 > t ? c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b : 2.5 / 2.75 > t ? c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b : c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    },
    /**
     * @param {?} x
     * @param {number} t
     * @param {number} b
     * @param {number} c
     * @param {number} d
     * @return {?}
     */
    easeInOutBounce: function (x, t, b, c, d) {
      return d / 2 > t ? 0.5 * jQuery.easing.easeInBounce(x, 2 * t, 0, c, d) + b : 0.5 * jQuery.easing.easeOutBounce(x, 2 * t - d, 0, c, d) + 0.5 * c + b;
    }
  }), "function" != typeof Object.create && (Object.create = function (prototype) {
    /**
     * @return {undefined}
     */
    function Type() {}
    return Type.prototype = prototype, new Type;
  }),
  function ($, win, doc) {
    var Carousel = {
      /**
       * @param {?} options
       * @param {?} el
       * @return {undefined}
       */
      init: function (options, el) {
        var base = this;
        base.$elem = $(el);
        base.options = $.extend({}, $.fn.owlCarousel.options, base.$elem.data(), options);
        base.userOptions = options;
        base.loadContent();
      },
      /**
       * @return {undefined}
       */
      loadContent: function () {
        /**
         * @param {?} data
         * @return {undefined}
         */
        function getData(data) {
          var i;
          /** @type {string} */
          var s = "";
          if ("function" == typeof base.options.jsonSuccess) {
            base.options.jsonSuccess.apply(this, [data]);
          } else {
            for (i in data.owl) {
              if (data.owl.hasOwnProperty(i)) {
                s += data.owl[i].item;
              }
            }
            base.$elem.html(s);
          }
          base.logIn();
        }
        var base = this;
        var url;
        if ("function" == typeof base.options.beforeInit) {
          base.options.beforeInit.apply(this, [base.$elem]);
        }
        if ("string" == typeof base.options.jsonPath) {
          /** @type {string} */
          url = base.options.jsonPath;
          $.getJSON(url, getData);
        } else {
          base.logIn();
        }
      },
      /**
       * @return {undefined}
       */
      logIn: function () {
        var base = this;
        base.$elem.data("owl-originalStyles", base.$elem.attr("style"));
        base.$elem.data("owl-originalClasses", base.$elem.attr("class"));
        base.$elem.css({
          opacity: 0
        });
        base.orignalItems = base.options.items;
        base.checkBrowser();
        /** @type {number} */
        base.wrapperWidth = 0;
        /** @type {null} */
        base.checkVisible = null;
        base.setVars();
      },
      /**
       * @return {?}
       */
      setVars: function () {
        var base = this;
        return 0 === base.$elem.children().length ? false : (base.baseClass(), base.eventTypes(), base.$userItems = base.$elem.children(), base.itemsAmount = base.$userItems.length, base.wrapItems(), base.$owlItems = base.$elem.find(".owl-item"), base.$owlWrapper = base.$elem.find(".owl-wrapper"), base.playDirection = "next", base.prevItem = 0, base.prevArr = [0], base.currentItem = 0, base.customEvents(), void base.onStartup());
      },
      /**
       * @return {undefined}
       */
      onStartup: function () {
        var base = this;
        base.updateItems();
        base.calculateAll();
        base.buildControls();
        base.updateControls();
        base.response();
        base.moveEvents();
        base.stopOnHover();
        base.owlStatus();
        if (base.options.transitionStyle !== false) {
          base.transitionTypes(base.options.transitionStyle);
        }
        if (base.options.autoPlay === true) {
          /** @type {number} */
          base.options.autoPlay = 5E3;
        }
        base.play();
        base.$elem.find(".owl-wrapper").css("display", "block");
        if (base.$elem.is(":visible")) {
          base.$elem.css("opacity", 1);
        } else {
          base.watchVisibility();
        }
        /** @type {boolean} */
        base.onstartup = false;
        base.eachMoveUpdate();
        if ("function" == typeof base.options.afterInit) {
          base.options.afterInit.apply(this, [base.$elem]);
        }
      },
      /**
       * @return {undefined}
       */
      eachMoveUpdate: function () {
        var base = this;
        if (base.options.lazyLoad === true) {
          base.lazyLoad();
        }
        if (base.options.autoHeight === true) {
          base.autoHeight();
        }
        base.onVisibleItems();
        if ("function" == typeof base.options.afterAction) {
          base.options.afterAction.apply(this, [base.$elem]);
        }
      },
      /**
       * @return {undefined}
       */
      updateVars: function () {
        var base = this;
        if ("function" == typeof base.options.beforeUpdate) {
          base.options.beforeUpdate.apply(this, [base.$elem]);
        }
        base.watchVisibility();
        base.updateItems();
        base.calculateAll();
        base.updatePosition();
        base.updateControls();
        base.eachMoveUpdate();
        if ("function" == typeof base.options.afterUpdate) {
          base.options.afterUpdate.apply(this, [base.$elem]);
        }
      },
      /**
       * @return {undefined}
       */
      reload: function () {
        var base = this;
        win.setTimeout(function () {
          base.updateVars();
        }, 0);
      },
      /**
       * @return {?}
       */
      watchVisibility: function () {
        var base = this;
        return base.$elem.is(":visible") !== false ? false : (base.$elem.css({
          opacity: 0
        }), win.clearInterval(base.autoPlayInterval), win.clearInterval(base.checkVisible), void(base.checkVisible = win.setInterval(function () {
          if (base.$elem.is(":visible")) {
            base.reload();
            base.$elem.animate({
              opacity: 1
            }, 200);
            win.clearInterval(base.checkVisible);
          }
        }, 500)));
      },
      /**
       * @return {undefined}
       */
      wrapItems: function () {
        var base = this;
        base.$userItems.wrapAll('<div class="owl-wrapper">').wrap('<div class="owl-item"></div>');
        base.$elem.find(".owl-wrapper").wrap('<div class="owl-wrapper-outer">');
        base.wrapperOuter = base.$elem.find(".owl-wrapper-outer");
        base.$elem.css("display", "block");
      },
      /**
       * @return {undefined}
       */
      baseClass: function () {
        var base = this;
        var t = base.$elem.hasClass(base.options.baseClass);
        var n = base.$elem.hasClass(base.options.theme);
        if (!t) {
          base.$elem.addClass(base.options.baseClass);
        }
        if (!n) {
          base.$elem.addClass(base.options.theme);
        }
      },
      /**
       * @return {?}
       */
      updateItems: function () {
        var base = this;
        var t;
        var i;
        if (base.options.responsive === false) {
          return false;
        }
        if (base.options.singleItem === true) {
          return base.options.items = base.orignalItems = 1, base.options.itemsCustom = false, base.options.itemsDesktop = false, base.options.itemsDesktopSmall = false, base.options.itemsTablet = false, base.options.itemsTabletSmall = false, base.options.itemsMobile = false, false;
        }
        if (t = $(base.options.responsiveBaseWidth).width(), t > (base.options.itemsDesktop[0] || base.orignalItems) && (base.options.items = base.orignalItems), base.options.itemsCustom !== false) {
          base.options.itemsCustom.sort(function (mat0, mat1) {
            return mat0[0] - mat1[0];
          });
          /** @type {number} */
          i = 0;
          for (; i < base.options.itemsCustom.length; i += 1) {
            if (base.options.itemsCustom[i][0] <= t) {
              base.options.items = base.options.itemsCustom[i][1];
            }
          }
        } else {
          if (t <= base.options.itemsDesktop[0]) {
            if (base.options.itemsDesktop !== false) {
              base.options.items = base.options.itemsDesktop[1];
            }
          }
          if (t <= base.options.itemsDesktopSmall[0]) {
            if (base.options.itemsDesktopSmall !== false) {
              base.options.items = base.options.itemsDesktopSmall[1];
            }
          }
          if (t <= base.options.itemsTablet[0]) {
            if (base.options.itemsTablet !== false) {
              base.options.items = base.options.itemsTablet[1];
            }
          }
          if (t <= base.options.itemsTabletSmall[0]) {
            if (base.options.itemsTabletSmall !== false) {
              base.options.items = base.options.itemsTabletSmall[1];
            }
          }
          if (t <= base.options.itemsMobile[0]) {
            if (base.options.itemsMobile !== false) {
              base.options.items = base.options.itemsMobile[1];
            }
          }
        }
        if (base.options.items > base.itemsAmount) {
          if (base.options.itemsScaleUp === true) {
            base.options.items = base.itemsAmount;
          }
        }
      },
      /**
       * @return {?}
       */
      response: function () {
        var base = this;
        var timer;
        var o;
        return base.options.responsive !== true ? false : (o = $(win).width(), base.resizer = function () {
          if ($(win).width() !== o) {
            if (base.options.autoPlay !== false) {
              win.clearInterval(base.autoPlayInterval);
            }
            win.clearTimeout(timer);
            /** @type {number} */
            timer = win.setTimeout(function () {
              o = $(win).width();
              base.updateVars();
            }, base.options.responsiveRefreshRate);
          }
        }, void $(win).resize(base.resizer));
      },
      /**
       * @return {undefined}
       */
      updatePosition: function () {
        var base = this;
        base.jumpTo(base.currentItem);
        if (base.options.autoPlay !== false) {
          base.checkAp();
        }
      },
      /**
       * @return {undefined}
       */
      appendItemsSizes: function () {
        var base = this;
        /** @type {number} */
        var curSrc = 0;
        /** @type {number} */
        var b = base.itemsAmount - base.options.items;
        base.$owlItems.each(function (a) {
          var $this = $(this);
          $this.css({
            width: base.itemWidth
          }).data("owl-item", Number(a));
          if (a % base.options.items === 0 || a === b) {
            if (!(a > b)) {
              curSrc += 1;
            }
          }
          $this.data("owl-roundPages", curSrc);
        });
      },
      /**
       * @return {undefined}
       */
      appendWrapperSizes: function () {
        var base = this;
        /** @type {number} */
        var width = base.$owlItems.length * base.itemWidth;
        base.$owlWrapper.css({
          width: 2 * width,
          left: 0
        });
        base.appendItemsSizes();
      },
      /**
       * @return {undefined}
       */
      calculateAll: function () {
        var base = this;
        base.calculateWidth();
        base.appendWrapperSizes();
        base.loops();
        base.max();
      },
      /**
       * @return {undefined}
       */
      calculateWidth: function () {
        var base = this;
        /** @type {number} */
        base.itemWidth = Math.round(base.$elem.width() / base.options.items);
      },
      /**
       * @return {?}
       */
      max: function () {
        var base = this;
        /** @type {number} */
        var maximum = -1 * (base.itemsAmount * base.itemWidth - base.options.items * base.itemWidth);
        return base.options.items > base.itemsAmount ? (base.maximumItem = 0, maximum = 0, base.maximumPixels = 0) : (base.maximumItem = base.itemsAmount - base.options.items, base.maximumPixels = maximum), maximum;
      },
      /**
       * @return {?}
       */
      min: function () {
        return 0;
      },
      /**
       * @return {undefined}
       */
      loops: function () {
        var base = this;
        /** @type {number} */
        var prev = 0;
        /** @type {number} */
        var elWidth = 0;
        var i;
        var item;
        var roundPageNum;
        /** @type {Array} */
        base.positionsInArray = [0];
        /** @type {Array} */
        base.pagesInArray = [];
        /** @type {number} */
        i = 0;
        for (; i < base.itemsAmount; i += 1) {
          elWidth += base.itemWidth;
          base.positionsInArray.push(-elWidth);
          if (base.options.scrollPerPage === true) {
            item = $(base.$owlItems[i]);
            roundPageNum = item.data("owl-roundPages");
            if (roundPageNum !== prev) {
              base.pagesInArray[prev] = base.positionsInArray[i];
              prev = roundPageNum;
            }
          }
        }
      },
      /**
       * @return {undefined}
       */
      buildControls: function () {
        var base = this;
        if (base.options.navigation === true || base.options.pagination === true) {
          base.owlControls = $('<div class="owl-controls"/>').toggleClass("clickable", !base.browser.isTouch).appendTo(base.$elem);
        }
        if (base.options.pagination === true) {
          base.buildPagination();
        }
        if (base.options.navigation === true) {
          base.buildButtons();
        }
      },
      /**
       * @return {undefined}
       */
      buildButtons: function () {
        var base = this;
        var buttonsWrapper = $('<div class="owl-buttons"/>');
        base.owlControls.append(buttonsWrapper);
        base.buttonPrev = $("<div/>", {
          "class": "owl-prev",
          html: base.options.navigationText[0] || ""
        });
        base.buttonNext = $("<div/>", {
          "class": "owl-next",
          html: base.options.navigationText[1] || ""
        });
        buttonsWrapper.append(base.buttonPrev).append(base.buttonNext);
        buttonsWrapper.on("touchstart.owlControls mousedown.owlControls", 'div[class^="owl"]', function (types) {
          types.preventDefault();
        });
        buttonsWrapper.on("touchend.owlControls mouseup.owlControls", 'div[class^="owl"]', function (types) {
          types.preventDefault();
          if ($(this).hasClass("owl-next")) {
            base.next();
          } else {
            base.prev();
          }
        });
      },
      /**
       * @return {undefined}
       */
      buildPagination: function () {
        var base = this;
        base.paginationWrapper = $('<div class="owl-pagination"/>');
        base.owlControls.append(base.paginationWrapper);
        base.paginationWrapper.on("touchend.owlControls mouseup.owlControls", ".owl-page", function (types) {
          types.preventDefault();
          if (Number($(this).data("owl-page")) !== base.currentItem) {
            base.goTo(Number($(this).data("owl-page")), true);
          }
        });
      },
      /**
       * @return {?}
       */
      updatePagination: function () {
        var base = this;
        var counter;
        var lastPage;
        var lastItem;
        var i;
        var paginationButton;
        var paginationButtonInner;
        if (base.options.pagination === false) {
          return false;
        }
        base.paginationWrapper.html("");
        /** @type {number} */
        counter = 0;
        /** @type {number} */
        lastPage = base.itemsAmount - base.itemsAmount % base.options.items;
        /** @type {number} */
        i = 0;
        for (; i < base.itemsAmount; i += 1) {
          if (i % base.options.items === 0) {
            counter += 1;
            if (lastPage === i) {
              /** @type {number} */
              lastItem = base.itemsAmount - base.options.items;
            }
            paginationButton = $("<div/>", {
              "class": "owl-page"
            });
            paginationButtonInner = $("<span></span>", {
              text: base.options.paginationNumbers === true ? counter : "",
              "class": base.options.paginationNumbers === true ? "owl-numbers" : ""
            });
            paginationButton.append(paginationButtonInner);
            paginationButton.data("owl-page", lastPage === i ? lastItem : i);
            paginationButton.data("owl-roundPages", counter);
            base.paginationWrapper.append(paginationButton);
          }
        }
        base.checkPagination();
      },
      /**
       * @return {?}
       */
      checkPagination: function () {
        var base = this;
        return base.options.pagination === false ? false : void base.paginationWrapper.find(".owl-page").each(function () {
          if ($(this).data("owl-roundPages") === $(base.$owlItems[base.currentItem]).data("owl-roundPages")) {
            base.paginationWrapper.find(".owl-page").removeClass("active");
            $(this).addClass("active");
          }
        });
      },
      /**
       * @return {?}
       */
      checkNavigation: function () {
        var base = this;
        return base.options.navigation === false ? false : void(base.options.rewindNav === false && (0 === base.currentItem && 0 === base.maximumItem ? (base.buttonPrev.addClass("disabled"), base.buttonNext.addClass("disabled")) : 0 === base.currentItem && 0 !== base.maximumItem ? (base.buttonPrev.addClass("disabled"), base.buttonNext.removeClass("disabled")) : base.currentItem === base.maximumItem ? (base.buttonPrev.removeClass("disabled"), base.buttonNext.addClass("disabled")) : 0 !== base.currentItem &&
          (base.currentItem !== base.maximumItem && (base.buttonPrev.removeClass("disabled"), base.buttonNext.removeClass("disabled")))));
      },
      /**
       * @return {undefined}
       */
      updateControls: function () {
        var base = this;
        base.updatePagination();
        base.checkNavigation();
        if (base.owlControls) {
          if (base.options.items >= base.itemsAmount) {
            base.owlControls.hide();
          } else {
            base.owlControls.show();
          }
        }
      },
      /**
       * @return {undefined}
       */
      destroyControls: function () {
        var base = this;
        if (base.owlControls) {
          base.owlControls.remove();
        }
      },
      /**
       * @param {string} speed
       * @return {?}
       */
      next: function (speed) {
        var base = this;
        if (base.isTransition) {
          return false;
        }
        if (base.currentItem += base.options.scrollPerPage === true ? base.options.items : 1, base.currentItem > base.maximumItem + (base.options.scrollPerPage === true ? base.options.items - 1 : 0)) {
          if (base.options.rewindNav !== true) {
            return base.currentItem = base.maximumItem, false;
          }
          /** @type {number} */
          base.currentItem = 0;
          /** @type {string} */
          speed = "rewind";
        }
        base.goTo(base.currentItem, speed);
      },
      /**
       * @param {string} speed
       * @return {?}
       */
      prev: function (speed) {
        var base = this;
        if (base.isTransition) {
          return false;
        }
        if (base.options.scrollPerPage === true && (base.currentItem > 0 && base.currentItem < base.options.items) ? base.currentItem = 0 : base.currentItem -= base.options.scrollPerPage === true ? base.options.items : 1, base.currentItem < 0) {
          if (base.options.rewindNav !== true) {
            return base.currentItem = 0, false;
          }
          base.currentItem = base.maximumItem;
          /** @type {string} */
          speed = "rewind";
        }
        base.goTo(base.currentItem, speed);
      },
      /**
       * @param {number} position
       * @param {boolean} speed
       * @param {string} drag
       * @return {?}
       */
      goTo: function (position, speed, drag) {
        var base = this;
        var goToPixel;
        return base.isTransition ? false : ("function" == typeof base.options.beforeMove && base.options.beforeMove.apply(this, [base.$elem]), position >= base.maximumItem ? position = base.maximumItem : 0 >= position && (position = 0), base.currentItem = base.owl.currentItem = position, base.options.transitionStyle !== false && ("drag" !== drag && (1 === base.options.items && base.browser.support3d === true)) ? (base.swapSpeed(0), base.browser.support3d === true ? base.transition3d(base.positionsInArray[position]) :
          base.css2slide(base.positionsInArray[position], 1), base.afterGo(), base.singleItemTransition(), false) : (goToPixel = base.positionsInArray[position], base.browser.support3d === true ? (base.isCss3Finish = false, speed === true ? (base.swapSpeed("paginationSpeed"), win.setTimeout(function () {
          /** @type {boolean} */
          base.isCss3Finish = true;
        }, base.options.paginationSpeed)) : "rewind" === speed ? (base.swapSpeed(base.options.rewindSpeed), win.setTimeout(function () {
          /** @type {boolean} */
          base.isCss3Finish = true;
        }, base.options.rewindSpeed)) : (base.swapSpeed("slideSpeed"), win.setTimeout(function () {
          /** @type {boolean} */
          base.isCss3Finish = true;
        }, base.options.slideSpeed)), base.transition3d(goToPixel)) : speed === true ? base.css2slide(goToPixel, base.options.paginationSpeed) : "rewind" === speed ? base.css2slide(goToPixel, base.options.rewindSpeed) : base.css2slide(goToPixel, base.options.slideSpeed), void base.afterGo()));
      },
      /**
       * @param {number} position
       * @return {undefined}
       */
      jumpTo: function (position) {
        var base = this;
        if ("function" == typeof base.options.beforeMove) {
          base.options.beforeMove.apply(this, [base.$elem]);
        }
        if (position >= base.maximumItem || -1 === position) {
          position = base.maximumItem;
        } else {
          if (0 >= position) {
            /** @type {number} */
            position = 0;
          }
        }
        base.swapSpeed(0);
        if (base.browser.support3d === true) {
          base.transition3d(base.positionsInArray[position]);
        } else {
          base.css2slide(base.positionsInArray[position], 1);
        }
        base.currentItem = base.owl.currentItem = position;
        base.afterGo();
      },
      /**
       * @return {undefined}
       */
      afterGo: function () {
        var base = this;
        base.prevArr.push(base.currentItem);
        base.prevItem = base.owl.prevItem = base.prevArr[base.prevArr.length - 2];
        base.prevArr.shift(0);
        if (base.prevItem !== base.currentItem) {
          base.checkPagination();
          base.checkNavigation();
          base.eachMoveUpdate();
          if (base.options.autoPlay !== false) {
            base.checkAp();
          }
        }
        if ("function" == typeof base.options.afterMove) {
          if (base.prevItem !== base.currentItem) {
            base.options.afterMove.apply(this, [base.$elem]);
          }
        }
      },
      /**
       * @return {undefined}
       */
      stop: function () {
        var base = this;
        /** @type {string} */
        base.apStatus = "stop";
        win.clearInterval(base.autoPlayInterval);
      },
      /**
       * @return {undefined}
       */
      checkAp: function () {
        var base = this;
        if ("stop" !== base.apStatus) {
          base.play();
        }
      },
      /**
       * @return {?}
       */
      play: function () {
        var base = this;
        return base.apStatus = "play", base.options.autoPlay === false ? false : (win.clearInterval(base.autoPlayInterval), void(base.autoPlayInterval = win.setInterval(function () {
          base.next(true);
        }, base.options.autoPlay)));
      },
      /**
       * @param {string} action
       * @return {undefined}
       */
      swapSpeed: function (action) {
        var base = this;
        if ("slideSpeed" === action) {
          base.$owlWrapper.css(base.addCssSpeed(base.options.slideSpeed));
        } else {
          if ("paginationSpeed" === action) {
            base.$owlWrapper.css(base.addCssSpeed(base.options.paginationSpeed));
          } else {
            if ("string" != typeof action) {
              base.$owlWrapper.css(base.addCssSpeed(action));
            }
          }
        }
      },
      /**
       * @param {string} speed
       * @return {?}
       */
      addCssSpeed: function (speed) {
        return {
          "-webkit-transition": "all " + speed + "ms ease",
          "-moz-transition": "all " + speed + "ms ease",
          "-o-transition": "all " + speed + "ms ease",
          transition: "all " + speed + "ms ease"
        };
      },
      /**
       * @return {?}
       */
      removeTransition: function () {
        return {
          "-webkit-transition": "",
          "-moz-transition": "",
          "-o-transition": "",
          transition: ""
        };
      },
      /**
       * @param {number} x
       * @return {?}
       */
      doTranslate: function (x) {
        return {
          "-webkit-transform": "translate3d(" + x + "px, 0px, 0px)",
          "-moz-transform": "translate3d(" + x + "px, 0px, 0px)",
          "-o-transform": "translate3d(" + x + "px, 0px, 0px)",
          "-ms-transform": "translate3d(" + x + "px, 0px, 0px)",
          transform: "translate3d(" + x + "px, 0px,0px)"
        };
      },
      /**
       * @param {number} value
       * @return {undefined}
       */
      transition3d: function (value) {
        var base = this;
        base.$owlWrapper.css(base.doTranslate(value));
      },
      /**
       * @param {Object} value
       * @return {undefined}
       */
      css2move: function (value) {
        var base = this;
        base.$owlWrapper.css({
          left: value
        });
      },
      /**
       * @param {Object} value
       * @param {Function} dataAndEvents
       * @return {undefined}
       */
      css2slide: function (value, dataAndEvents) {
        var base = this;
        /** @type {boolean} */
        base.isCssFinish = false;
        base.$owlWrapper.stop(true, true).animate({
          left: value
        }, {
          duration: dataAndEvents || base.options.slideSpeed,
          /**
           * @return {undefined}
           */
          complete: function () {
            /** @type {boolean} */
            base.isCssFinish = true;
          }
        });
      },
      /**
       * @return {undefined}
       */
      checkBrowser: function () {
        var base = this;
        /** @type {string} */
        var value = "translate3d(0px, 0px, 0px)";
        /** @type {Element} */
        var marginDiv = doc.createElement("div");
        var delegateEventSplitter;
        var codeSegments;
        var support3d;
        var isTouch;
        /** @type {string} */
        marginDiv.style.cssText = "  -moz-transform:" + value + "; -ms-transform:" + value + "; -o-transform:" + value + "; -webkit-transform:" + value + "; transform:" + value;
        /** @type {RegExp} */
        delegateEventSplitter = /translate3d\(0px, 0px, 0px\)/g;
        /** @type {(Array.<string>|null)} */
        codeSegments = marginDiv.style.cssText.match(delegateEventSplitter);
        /** @type {boolean} */
        support3d = null !== codeSegments && 1 === codeSegments.length;
        isTouch = "ontouchstart" in win || win.navigator.msMaxTouchPoints;
        base.browser = {
          support3d: support3d,
          isTouch: isTouch
        };
      },
      /**
       * @return {undefined}
       */
      moveEvents: function () {
        var base = this;
        if (base.options.mouseDrag !== false || base.options.touchDrag !== false) {
          base.gestures();
          base.disabledEvents();
        }
      },
      /**
       * @return {undefined}
       */
      eventTypes: function () {
        var base = this;
        /** @type {Array} */
        var types = ["s", "e", "x"];
        base.ev_types = {};
        if (base.options.mouseDrag === true && base.options.touchDrag === true) {
          /** @type {Array} */
          types = ["touchstart.owl mousedown.owl", "touchmove.owl mousemove.owl", "touchend.owl touchcancel.owl mouseup.owl"];
        } else {
          if (base.options.mouseDrag === false && base.options.touchDrag === true) {
            /** @type {Array} */
            types = ["touchstart.owl", "touchmove.owl", "touchend.owl touchcancel.owl"];
          } else {
            if (base.options.mouseDrag === true) {
              if (base.options.touchDrag === false) {
                /** @type {Array} */
                types = ["mousedown.owl", "mousemove.owl", "mouseup.owl"];
              }
            }
          }
        }
        base.ev_types.start = types[0];
        base.ev_types.move = types[1];
        base.ev_types.end = types[2];
      },
      /**
       * @return {undefined}
       */
      disabledEvents: function () {
        var base = this;
        base.$elem.on("dragstart.owl", function (types) {
          types.preventDefault();
        });
        base.$elem.on("mousedown.disableTextSelect", function (ev) {
          return $(ev.target).is("input, textarea, select, option");
        });
      },
      /**
       * @return {undefined}
       */
      gestures: function () {
        /**
         * @param {Object} e
         * @return {?}
         */
        function getTouches(e) {
          if (void 0 !== e.touches) {
            return {
              x: e.touches[0].pageX,
              y: e.touches[0].pageY
            };
          }
          if (void 0 === e.touches) {
            if (void 0 !== e.pageX) {
              return {
                x: e.pageX,
                y: e.pageY
              };
            }
            if (void 0 === e.pageX) {
              return {
                x: e.clientX,
                y: e.clientY
              };
            }
          }
        }
        /**
         * @param {string} type
         * @return {undefined}
         */
        function swapEvents(type) {
          if ("on" === type) {
            $(doc).on(base.ev_types.move, dragMove);
            $(doc).on(base.ev_types.end, dragEnd);
          } else {
            if ("off" === type) {
              $(doc).off(base.ev_types.move);
              $(doc).off(base.ev_types.end);
            }
          }
        }
        /**
         * @param {Object} event
         * @return {?}
         */
        function dragStart(event) {
          var e = event.originalEvent || (event || win.event);
          var position;
          if (3 === e.which) {
            return false;
          }
          if (!(base.itemsAmount <= base.options.items)) {
            if (base.isCssFinish === false && !base.options.dragBeforeAnimFinish) {
              return false;
            }
            if (base.isCss3Finish === false && !base.options.dragBeforeAnimFinish) {
              return false;
            }
            if (base.options.autoPlay !== false) {
              win.clearInterval(base.autoPlayInterval);
            }
            if (!(base.browser.isTouch === true)) {
              if (!base.$owlWrapper.hasClass("grabbing")) {
                base.$owlWrapper.addClass("grabbing");
              }
            }
            /** @type {number} */
            base.newPosX = 0;
            /** @type {number} */
            base.newRelativeX = 0;
            $(this).css(base.removeTransition());
            position = $(this).position();
            locals.relativePos = position.left;
            /** @type {number} */
            locals.offsetX = getTouches(e).x - position.left;
            /** @type {number} */
            locals.offsetY = getTouches(e).y - position.top;
            swapEvents("on");
            /** @type {boolean} */
            locals.sliding = false;
            locals.targetElement = e.target || e.srcElement;
          }
        }
        /**
         * @param {Object} event
         * @return {undefined}
         */
        function dragMove(event) {
          var e = event.originalEvent || (event || win.event);
          var minSwipe;
          var maxSwipe;
          /** @type {number} */
          base.newPosX = getTouches(e).x - locals.offsetX;
          /** @type {number} */
          base.newPosY = getTouches(e).y - locals.offsetY;
          /** @type {number} */
          base.newRelativeX = base.newPosX - locals.relativePos;
          if ("function" == typeof base.options.startDragging) {
            if (locals.dragging !== true) {
              if (0 !== base.newRelativeX) {
                /** @type {boolean} */
                locals.dragging = true;
                base.options.startDragging.apply(base, [base.$elem]);
              }
            }
          }
          if (base.newRelativeX > 8 || base.newRelativeX < -8) {
            if (base.browser.isTouch === true) {
              if (void 0 !== e.preventDefault) {
                e.preventDefault();
              } else {
                /** @type {boolean} */
                e.returnValue = false;
              }
              /** @type {boolean} */
              locals.sliding = true;
            }
          }
          if (base.newPosY > 10 || base.newPosY < -10) {
            if (locals.sliding === false) {
              $(doc).off("touchmove.owl");
            }
          }
          /**
           * @return {?}
           */
          minSwipe = function () {
            return base.newRelativeX / 5;
          };
          /**
           * @return {?}
           */
          maxSwipe = function () {
            return base.maximumPixels + base.newRelativeX / 5;
          };
          /** @type {number} */
          base.newPosX = Math.max(Math.min(base.newPosX, minSwipe()), maxSwipe());
          if (base.browser.support3d === true) {
            base.transition3d(base.newPosX);
          } else {
            base.css2move(base.newPosX);
          }
        }
        /**
         * @param {Object} event
         * @return {undefined}
         */
        function dragEnd(event) {
          var ev = event.originalEvent || (event || win.event);
          var newPosition;
          var handlers;
          var handler;
          ev.target = ev.target || ev.srcElement;
          /** @type {boolean} */
          locals.dragging = false;
          if (base.browser.isTouch !== true) {
            base.$owlWrapper.removeClass("grabbing");
          }
          if (base.newRelativeX < 0) {
            /** @type {string} */
            base.dragDirection = base.owl.dragDirection = "left";
          } else {
            /** @type {string} */
            base.dragDirection = base.owl.dragDirection = "right";
          }
          if (0 !== base.newRelativeX) {
            newPosition = base.getNewPosition();
            base.goTo(newPosition, false, "drag");
            if (locals.targetElement === ev.target) {
              if (base.browser.isTouch !== true) {
                $(ev.target).on("click.disable", function (e) {
                  e.stopImmediatePropagation();
                  e.stopPropagation();
                  e.preventDefault();
                  $(e.target).off("click.disable");
                });
                handlers = $._data(ev.target, "events").click;
                handler = handlers.pop();
                handlers.splice(0, 0, handler);
              }
            }
          }
          swapEvents("off");
        }
        var base = this;
        var locals = {
          offsetX: 0,
          offsetY: 0,
          baseElWidth: 0,
          relativePos: 0,
          position: null,
          minSwipe: null,
          maxSwipe: null,
          sliding: null,
          dargging: null,
          targetElement: null
        };
        /** @type {boolean} */
        base.isCssFinish = true;
        base.$elem.on(base.ev_types.start, ".owl-wrapper", dragStart);
      },
      /**
       * @return {?}
       */
      getNewPosition: function () {
        var base = this;
        var newPosition = base.closestItem();
        return newPosition > base.maximumItem ? (base.currentItem = base.maximumItem, newPosition = base.maximumItem) : base.newPosX >= 0 && (newPosition = 0, base.currentItem = 0), newPosition;
      },
      /**
       * @return {?}
       */
      closestItem: function () {
        var base = this;
        var array = base.options.scrollPerPage === true ? base.pagesInArray : base.positionsInArray;
        var goal = base.newPosX;
        /** @type {null} */
        var closest = null;
        return $.each(array, function (i, v) {
          if (goal - base.itemWidth / 20 > array[i + 1] && (goal - base.itemWidth / 20 < v && "left" === base.moveDirection())) {
            /** @type {number} */
            closest = v;
            if (base.options.scrollPerPage === true) {
              base.currentItem = $.inArray(closest, base.positionsInArray);
            } else {
              /** @type {number} */
              base.currentItem = i;
            }
          } else {
            if (goal + base.itemWidth / 20 < v) {
              if (goal + base.itemWidth / 20 > (array[i + 1] || array[i] - base.itemWidth)) {
                if ("right" === base.moveDirection()) {
                  if (base.options.scrollPerPage === true) {
                    closest = array[i + 1] || array[array.length - 1];
                    base.currentItem = $.inArray(closest, base.positionsInArray);
                  } else {
                    closest = array[i + 1];
                    base.currentItem = i + 1;
                  }
                }
              }
            }
          }
        }), base.currentItem;
      },
      /**
       * @return {?}
       */
      moveDirection: function () {
        var base = this;
        var snapperOpenSide;
        return base.newRelativeX < 0 ? (snapperOpenSide = "right", base.playDirection = "next") : (snapperOpenSide = "left", base.playDirection = "prev"), snapperOpenSide;
      },
      /**
       * @return {undefined}
       */
      customEvents: function () {
        var base = this;
        base.$elem.on("owl.next", function () {
          base.next();
        });
        base.$elem.on("owl.prev", function () {
          base.prev();
        });
        base.$elem.on("owl.play", function (dataAndEvents, autoPlay) {
          /** @type {number} */
          base.options.autoPlay = autoPlay;
          base.play();
          /** @type {string} */
          base.hoverStatus = "play";
        });
        base.$elem.on("owl.stop", function () {
          base.stop();
          /** @type {string} */
          base.hoverStatus = "stop";
        });
        base.$elem.on("owl.goTo", function (dataAndEvents, newPosition) {
          base.goTo(newPosition);
        });
        base.$elem.on("owl.jumpTo", function (dataAndEvents, item) {
          base.jumpTo(item);
        });
      },
      /**
       * @return {undefined}
       */
      stopOnHover: function () {
        var base = this;
        if (base.options.stopOnHover === true) {
          if (base.browser.isTouch !== true) {
            if (base.options.autoPlay !== false) {
              base.$elem.on("mouseover", function () {
                base.stop();
              });
              base.$elem.on("mouseout", function () {
                if ("stop" !== base.hoverStatus) {
                  base.play();
                }
              });
            }
          }
        }
      },
      /**
       * @return {?}
       */
      lazyLoad: function () {
        var base = this;
        var i;
        var $item;
        var itemNumber;
        var $lazyImg;
        var s;
        if (base.options.lazyLoad === false) {
          return false;
        }
        /** @type {number} */
        i = 0;
        for (; i < base.itemsAmount; i += 1) {
          $item = $(base.$owlItems[i]);
          if ("loaded" !== $item.data("owl-loaded")) {
            itemNumber = $item.data("owl-item");
            $lazyImg = $item.find(".lazyOwl");
            if ("string" == typeof $lazyImg.data("src")) {
              if (void 0 === $item.data("owl-loaded")) {
                $lazyImg.hide();
                $item.addClass("loading").data("owl-loaded", "checked");
              }
              /** @type {boolean} */
              s = base.options.lazyFollow === true ? itemNumber >= base.currentItem : true;
              if (s) {
                if (itemNumber < base.currentItem + base.options.items) {
                  if ($lazyImg.length) {
                    base.lazyPreload($item, $lazyImg);
                  }
                }
              }
            } else {
              $item.data("owl-loaded", "loaded");
            }
          }
        }
      },
      /**
       * @param {Event} $item
       * @param {Object} $lazyImg
       * @return {undefined}
       */
      lazyPreload: function ($item, $lazyImg) {
        /**
         * @return {undefined}
         */
        function showImage() {
          $item.data("owl-loaded", "loaded").removeClass("loading");
          $lazyImg.removeAttr("data-src");
          if ("fade" === base.options.lazyEffect) {
            $lazyImg.fadeIn(400);
          } else {
            $lazyImg.show();
          }
          if ("function" == typeof base.options.afterLazyLoad) {
            base.options.afterLazyLoad.apply(this, [base.$elem]);
          }
        }
        /**
         * @return {undefined}
         */
        function checkLazyImage() {
          a += 1;
          if (base.completeImg($lazyImg.get(0)) || r === true) {
            showImage();
          } else {
            if (100 >= a) {
              win.setTimeout(checkLazyImage, 100);
            } else {
              showImage();
            }
          }
        }
        var base = this;
        /** @type {number} */
        var a = 0;
        var r;
        if ("DIV" === $lazyImg.prop("tagName")) {
          $lazyImg.css("background-image", "url(" + $lazyImg.data("src") + ")");
          /** @type {boolean} */
          r = true;
        } else {
          $lazyImg[0].src = $lazyImg.data("src");
        }
        checkLazyImage();
      },
      /**
       * @return {undefined}
       */
      autoHeight: function () {
        /**
         * @return {undefined}
         */
        function addHeight() {
          var f = $(base.$owlItems[base.currentItem]).height();
          base.wrapperOuter.css("height", f + "px");
          if (!base.wrapperOuter.hasClass("autoHeight")) {
            win.setTimeout(function () {
              base.wrapperOuter.addClass("autoHeight");
            }, 0);
          }
        }
        /**
         * @return {undefined}
         */
        function checkImage() {
          s += 1;
          if (base.completeImg($imgs.get(0))) {
            addHeight();
          } else {
            if (100 >= s) {
              win.setTimeout(checkImage, 100);
            } else {
              base.wrapperOuter.css("height", "");
            }
          }
        }
        var base = this;
        var $imgs = $(base.$owlItems[base.currentItem]).find("img");
        var s;
        if (void 0 !== $imgs.get(0)) {
          /** @type {number} */
          s = 0;
          checkImage();
        } else {
          addHeight();
        }
      },
      /**
       * @param {Object} img
       * @return {?}
       */
      completeImg: function (img) {
        var val;
        return img.complete ? (val = typeof img.naturalWidth, "undefined" !== val && 0 === img.naturalWidth ? false : true) : false;
      },
      /**
       * @return {undefined}
       */
      onVisibleItems: function () {
        var base = this;
        var i;
        if (base.options.addClassActive === true) {
          base.$owlItems.removeClass("active");
        }
        /** @type {Array} */
        base.visibleItems = [];
        i = base.currentItem;
        for (; i < base.currentItem + base.options.items; i += 1) {
          base.visibleItems.push(i);
          if (base.options.addClassActive === true) {
            $(base.$owlItems[i]).addClass("active");
          }
        }
        /** @type {Array} */
        base.owl.visibleItems = base.visibleItems;
      },
      /**
       * @param {string} className
       * @return {undefined}
       */
      transitionTypes: function (className) {
        var base = this;
        /** @type {string} */
        base.outClass = "owl-" + className + "-out";
        /** @type {string} */
        base.inClass = "owl-" + className + "-in";
      },
      /**
       * @return {undefined}
       */
      singleItemTransition: function () {
        /**
         * @param {number} prevPos
         * @return {?}
         */
        function transStyles(prevPos) {
          return {
            position: "relative",
            left: prevPos + "px"
          };
        }
        var base = this;
        var outClass = base.outClass;
        var inClass = base.inClass;
        var $currentItem = base.$owlItems.eq(base.currentItem);
        var $prevItem = base.$owlItems.eq(base.prevItem);
        var prevPos = Math.abs(base.positionsInArray[base.currentItem]) + base.positionsInArray[base.prevItem];
        /** @type {number} */
        var origin = Math.abs(base.positionsInArray[base.currentItem]) + base.itemWidth / 2;
        /** @type {string} */
        var event = "webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend";
        /** @type {boolean} */
        base.isTransition = true;
        base.$owlWrapper.addClass("owl-origin").css({
          "-webkit-transform-origin": origin + "px",
          "-moz-perspective-origin": origin + "px",
          "perspective-origin": origin + "px"
        });
        $prevItem.css(transStyles(prevPos, 10)).addClass(outClass).on(event, function () {
          /** @type {boolean} */
          base.endPrev = true;
          $prevItem.off(event);
          base.clearTransStyle($prevItem, outClass);
        });
        $currentItem.addClass(inClass).on(event, function () {
          /** @type {boolean} */
          base.endCurrent = true;
          $currentItem.off(event);
          base.clearTransStyle($currentItem, inClass);
        });
      },
      /**
       * @param {?} item
       * @param {string} classToRemove
       * @return {undefined}
       */
      clearTransStyle: function (item, classToRemove) {
        var base = this;
        item.css({
          position: "",
          left: ""
        }).removeClass(classToRemove);
        if (base.endPrev) {
          if (base.endCurrent) {
            base.$owlWrapper.removeClass("owl-origin");
            /** @type {boolean} */
            base.endPrev = false;
            /** @type {boolean} */
            base.endCurrent = false;
            /** @type {boolean} */
            base.isTransition = false;
          }
        }
      },
      /**
       * @return {undefined}
       */
      owlStatus: function () {
        var base = this;
        base.owl = {
          userOptions: base.userOptions,
          baseElement: base.$elem,
          userItems: base.$userItems,
          owlItems: base.$owlItems,
          currentItem: base.currentItem,
          prevItem: base.prevItem,
          visibleItems: base.visibleItems,
          isTouch: base.browser.isTouch,
          browser: base.browser,
          dragDirection: base.dragDirection
        };
      },
      /**
       * @return {undefined}
       */
      clearEvents: function () {
        var base = this;
        base.$elem.off(".owl owl mousedown.disableTextSelect");
        $(doc).off(".owl owl");
        $(win).off("resize", base.resizer);
      },
      /**
       * @return {undefined}
       */
      unWrap: function () {
        var base = this;
        if (0 !== base.$elem.children().length) {
          base.$owlWrapper.unwrap();
          base.$userItems.unwrap().unwrap();
          if (base.owlControls) {
            base.owlControls.remove();
          }
        }
        base.clearEvents();
        base.$elem.attr("style", base.$elem.data("owl-originalStyles") || "").attr("class", base.$elem.data("owl-originalClasses"));
      },
      /**
       * @return {undefined}
       */
      destroy: function () {
        var base = this;
        base.stop();
        win.clearInterval(base.checkVisible);
        base.unWrap();
        base.$elem.removeData();
      },
      /**
       * @param {?} newOptions
       * @return {undefined}
       */
      reinit: function (newOptions) {
        var base = this;
        var options = $.extend({}, base.userOptions, newOptions);
        base.unWrap();
        base.init(options, base.$elem);
      },
      /**
       * @param {boolean} item
       * @param {number} callback
       * @return {?}
       */
      addItem: function (item, callback) {
        var base = this;
        var index;
        return item ? 0 === base.$elem.children().length ? (base.$elem.append(item), base.setVars(), false) : (base.unWrap(), index = void 0 === callback || -1 === callback ? -1 : callback, index >= base.$userItems.length || -1 === index ? base.$userItems.eq(-1).after(item) : base.$userItems.eq(index).before(item), void base.setVars()) : false;
      },
      /**
       * @param {number} key
       * @return {?}
       */
      removeItem: function (key) {
        var base = this;
        var scripts;
        return 0 === base.$elem.children().length ? false : (scripts = void 0 === key || -1 === key ? -1 : key, base.unWrap(), base.$userItems.eq(scripts).remove(), void base.setVars());
      }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    $.fn.owlCarousel = function (options) {
      return this.each(function () {
        if ($(this).data("owl-init") === true) {
          return false;
        }
        $(this).data("owl-init", true);
        /** @type {Object} */
        var carousel = Object.create(Carousel);
        carousel.init(options, this);
        $.data(this, "owlCarousel", carousel);
      });
    };
    $.fn.owlCarousel.options = {
      items: 5,
      itemsCustom: false,
      itemsDesktop: [1199, 4],
      itemsDesktopSmall: [979, 3],
      itemsTablet: [768, 2],
      itemsTabletSmall: false,
      itemsMobile: [479, 1],
      singleItem: false,
      itemsScaleUp: false,
      slideSpeed: 200,
      paginationSpeed: 800,
      rewindSpeed: 1E3,
      autoPlay: false,
      stopOnHover: false,
      navigation: false,
      navigationText: ["prev", "next"],
      rewindNav: true,
      scrollPerPage: false,
      pagination: true,
      paginationNumbers: false,
      responsive: true,
      responsiveRefreshRate: 200,
      responsiveBaseWidth: win,
      baseClass: "owl-carousel",
      theme: "owl-theme",
      lazyLoad: false,
      lazyFollow: true,
      lazyEffect: "fade",
      autoHeight: false,
      jsonPath: false,
      jsonSuccess: false,
      dragBeforeAnimFinish: true,
      mouseDrag: true,
      touchDrag: true,
      addClassActive: false,
      transitionStyle: false,
      beforeUpdate: false,
      afterUpdate: false,
      beforeInit: false,
      afterInit: false,
      beforeMove: false,
      afterMove: false,
      afterAction: false,
      startDragging: false,
      afterLazyLoad: false
    };
  }(jQuery, window, document),
  function (exports, d, tag, path, i, el, s) {
    /** @type {string} */
    exports.GoogleAnalyticsObject = i;
    exports[i] = exports[i] || function () {
      (exports[i].q = exports[i].q || []).push(arguments);
    };
    /** @type {number} */
    exports[i].l = 1 * new Date;
    /** @type {Element} */
    el = d.createElement(tag);
    s = d.getElementsByTagName(tag)[0];
    /** @type {number} */
    el.async = 1;
    /** @type {string} */
    el.src = path;
    s.parentNode.insertBefore(el, s);
  }(window, document, "script", "//www.google-analytics.com/analytics.js", "ga"), ! function (dataAndEvents, definition) {
    if ("function" == typeof define && define.amd) {
      define(definition);
    } else {
      if ("object" == typeof exports) {
        module.exports = definition();
      } else {
        dataAndEvents.ScrollMagic = definition();
      }
    }
  }(this, function () {
    /**
     * @return {undefined}
     */
    var exports = function () {};
    /** @type {string} */
    exports.version = "2.0.5";
    window.addEventListener("mousewheel", function () {});
    /** @type {string} */
    var name = "data-scrollmagic-pin-spacer";
    /**
     * @param {?} settings
     * @return {?}
     */
    exports.Controller = function (settings) {
      var originalEvent;
      var timeoutTimer;
      /** @type {string} */
      var r = "ScrollMagic.Controller";
      /** @type {string} */
      var s = "FORWARD";
      /** @type {string} */
      var $0 = "REVERSE";
      /** @type {string} */
      var expr = "PAUSED";
      var defaults = $button.defaults;
      var self = this;
      var options = $.extend({}, defaults, settings);
      /** @type {Array} */
      var arr = [];
      /** @type {boolean} */
      var result = false;
      /** @type {number} */
      var len = 0;
      /** @type {string} */
      var old = expr;
      /** @type {boolean} */
      var isDocument = true;
      /** @type {number} */
      var params = 0;
      /** @type {boolean} */
      var node = true;
      /**
       * @return {undefined}
       */
      var init = function () {
        var i;
        for (i in options) {
          if (!defaults.hasOwnProperty(i)) {
            delete options[i];
          }
        }
        if (options.container = $.get.elements(options.container)[0], !options.container) {
          throw r + " init failed.";
        }
        /** @type {boolean} */
        isDocument = options.container === window || (options.container === document.body || !document.body.contains(options.container));
        if (isDocument) {
          /** @type {Window} */
          options.container = window;
        }
        params = extend();
        options.container.addEventListener("resize", resize);
        options.container.addEventListener("scroll", resize);
        /** @type {number} */
        options.refreshInterval = parseInt(options.refreshInterval) || defaults.refreshInterval;
        fix();
      };
      /**
       * @return {undefined}
       */
      var fix = function () {
        if (options.refreshInterval > 0) {
          /** @type {number} */
          timeoutTimer = window.setTimeout(handler, options.refreshInterval);
        }
      };
      /**
       * @return {?}
       */
      var bind = function () {
        return options.vertical ? $.get.scrollTop(options.container) : $.get.scrollLeft(options.container);
      };
      /**
       * @return {?}
       */
      var extend = function () {
        return options.vertical ? $.get.height(options.container) : $.get.width(options.container);
      };
      /** @type {function (number): undefined} */
      var callback = this._setScrollPos = function (val) {
        if (options.vertical) {
          if (isDocument) {
            window.scrollTo($.get.scrollLeft(), val);
          } else {
            /** @type {number} */
            options.container.scrollTop = val;
          }
        } else {
          if (isDocument) {
            window.scrollTo(val, $.get.scrollTop());
          } else {
            /** @type {number} */
            options.container.scrollLeft = val;
          }
        }
      };
      /**
       * @return {undefined}
       */
      var parse = function () {
        if (node && result) {
          var matched = $.type.Array(result) ? result : arr.slice(0);
          /** @type {boolean} */
          result = false;
          var i = len;
          len = self.scrollPos();
          /** @type {number} */
          var n = len - i;
          if (0 !== n) {
            /** @type {string} */
            old = n > 0 ? s : $0;
          }
          if (old === $0) {
            matched.reverse();
          }
          matched.forEach(function (vec) {
            vec.update(true);
          });
        }
      };
      /**
       * @return {undefined}
       */
      var requestAnimationFrame = function () {
        originalEvent = $.rAF(parse);
      };
      /**
       * @param {Event} event
       * @return {undefined}
       */
      var resize = function (event) {
        if ("resize" == event.type) {
          params = extend();
          /** @type {string} */
          old = expr;
        }
        if (result !== true) {
          /** @type {boolean} */
          result = true;
          requestAnimationFrame();
        }
      };
      /**
       * @return {undefined}
       */
      var handler = function () {
        if (!isDocument && params != extend()) {
          var event;
          try {
            /** @type {Event} */
            event = new Event("resize", {
              bubbles: false,
              cancelable: false
            });
          } catch (t) {
            /** @type {(Event|null)} */
            event = document.createEvent("Event");
            event.initEvent("resize", false, false);
          }
          options.container.dispatchEvent(event);
        }
        arr.forEach(function (target) {
          target.refresh();
        });
        fix();
      };
      this._options = options;
      /**
       * @param {Object} arr
       * @return {?}
       */
      var sortByProcedure = function (arr) {
        if (arr.length <= 1) {
          return arr;
        }
        var bProperties = arr.slice(0);
        return bProperties.sort(function (dataAndEvents, adapter) {
          return dataAndEvents.scrollOffset() > adapter.scrollOffset() ? 1 : -1;
        }), bProperties;
      };
      return this.addScene = function (object) {
        if ($.type.Array(object)) {
          object.forEach(function (which) {
            self.addScene(which);
          });
        } else {
          if (object instanceof exports.Scene) {
            if (object.controller() !== self) {
              object.addTo(self);
            } else {
              if (arr.indexOf(object) < 0) {
                arr.push(object);
                arr = sortByProcedure(arr);
                object.on("shift.controller_sort", function () {
                  arr = sortByProcedure(arr);
                });
                var key;
                for (key in options.globalSceneOptions) {
                  if (object[key]) {
                    object[key].call(object, options.globalSceneOptions[key]);
                  }
                }
              }
            }
          }
        }
        return self;
      }, this.removeScene = function (item) {
        if ($.type.Array(item)) {
          item.forEach(function (isSorted) {
            self.removeScene(isSorted);
          });
        } else {
          var index = arr.indexOf(item);
          if (index > -1) {
            item.off("shift.controller_sort");
            arr.splice(index, 1);
            item.remove();
          }
        }
        return self;
      }, this.updateScene = function (object, recurring) {
        return $.type.Array(object) ? object.forEach(function (which) {
          self.updateScene(which, recurring);
        }) : recurring ? object.update(true) : result !== true && (object instanceof exports.Scene && (result = result || [], -1 == result.indexOf(object) && result.push(object), result = sortByProcedure(result), requestAnimationFrame())), self;
      }, this.update = function (dataAndEvents) {
        return resize({
          type: "resize"
        }), dataAndEvents && parse(), self;
      }, this.scrollTo = function (node, value) {
        if ($.type.Number(node)) {
          callback.call(options.container, node, value);
        } else {
          if (node instanceof exports.Scene) {
            if (node.controller() === self) {
              self.scrollTo(node.scrollOffset(), value);
            }
          } else {
            if ($.type.Function(node)) {
              /** @type {Object} */
              callback = node;
            } else {
              var target = $.get.elements(node)[0];
              if (target) {
                for (; target.parentNode.hasAttribute(name);) {
                  target = target.parentNode;
                }
                /** @type {string} */
                var prop = options.vertical ? "top" : "left";
                var initVars = $.get.offset(options.container);
                var vars = $.get.offset(target);
                if (!isDocument) {
                  initVars[prop] -= self.scrollPos();
                }
                self.scrollTo(vars[prop] - initVars[prop], value);
              }
            }
          }
        }
        return self;
      }, this.scrollPos = function (walkers) {
        return arguments.length ? ($.type.Function(walkers) && (bind = walkers), self) : bind.call(self);
      }, this.info = function (name) {
        var data = {
          size: params,
          vertical: options.vertical,
          scrollPos: len,
          scrollDirection: old,
          container: options.container,
          isDocument: isDocument
        };
        return arguments.length ? void 0 !== data[name] ? data[name] : void 0 : data;
      }, this.loglevel = function () {
        return self;
      }, this.enabled = function (root) {
        return arguments.length ? (node != root && (node = !!root, self.updateScene(arr, true)), self) : node;
      }, this.destroy = function (async) {
        window.clearTimeout(timeoutTimer);
        var arrCount = arr.length;
        for (; arrCount--;) {
          arr[arrCount].destroy(async);
        }
        return options.container.removeEventListener("resize", resize), options.container.removeEventListener("scroll", resize), $.cAF(originalEvent), null;
      }, init(), self;
    };
    var $button = {
      defaults: {
        container: window,
        vertical: true,
        globalSceneOptions: {},
        loglevel: 2,
        refreshInterval: 100
      }
    };
    /**
     * @param {string} option
     * @param {boolean} value
     * @return {undefined}
     */
    exports.Controller.addOption = function (option, value) {
      /** @type {boolean} */
      $button.defaults[option] = value;
    };
    /**
     * @param {Function} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    exports.Controller.extend = function (expectedNumberOfNonCommentArgs) {
      var base = this;
      /**
       * @return {?}
       */
      exports.Controller = function () {
        return base.apply(this, arguments), this.$super = $.extend({}, this), expectedNumberOfNonCommentArgs.apply(this, arguments) || this;
      };
      $.extend(exports.Controller, base);
      exports.Controller.prototype = base.prototype;
      /** @type {function (): ?} */
      exports.Controller.prototype.constructor = exports.Controller;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    exports.Scene = function (opt) {
      var fn;
      var that;
      /** @type {string} */
      var WAITING = "BEFORE";
      /** @type {string} */
      var state = "DURING";
      /** @type {string} */
      var CLOSED = "AFTER";
      var defaults = config.defaults;
      var self = this;
      var opts = $.extend({}, defaults, opt);
      /** @type {string} */
      var currentState = WAITING;
      /** @type {number} */
      var scale = 0;
      var params = {
        start: 0,
        end: 0
      };
      /** @type {number} */
      var dest = 0;
      /** @type {boolean} */
      var list = true;
      /**
       * @return {undefined}
       */
      var add = function () {
        var opt;
        for (opt in opts) {
          if (!defaults.hasOwnProperty(opt)) {
            delete opts[opt];
          }
        }
        var suiteView;
        for (suiteView in defaults) {
          isUndefined(suiteView);
        }
        toString();
      };
      var c = {};
      /**
       * @param {string} type
       * @param {Function} fn
       * @return {?}
       */
      this.on = function (type, fn) {
        return $.type.Function(fn) && (type = type.trim().split(" "), type.forEach(function (pair) {
          var match = pair.split(".");
          var ext = match[0];
          var eventName = match[1];
          if ("*" != ext) {
            if (!c[ext]) {
              /** @type {Array} */
              c[ext] = [];
            }
            c[ext].push({
              namespace: eventName || "",
              /** @type {Function} */
              callback: fn
            });
          }
        })), self;
      };
      /**
       * @param {string} eventName
       * @param {Function} x
       * @return {?}
       */
      this.off = function (eventName, x) {
        return eventName ? (eventName = eventName.trim().split(" "), eventName.forEach(function (pair) {
          var segmentMatch = pair.split(".");
          var key = segmentMatch[0];
          var value = segmentMatch[1] || "";
          /** @type {Array} */
          var asserterNames = "*" === key ? Object.keys(c) : [key];
          asserterNames.forEach(function (eventName) {
            var fns = c[eventName] || [];
            var i = fns.length;
            for (; i--;) {
              var that = fns[i];
              if (!!that) {
                if (!(value !== that.namespace && "*" !== value)) {
                  if (!(x && x != that.callback)) {
                    fns.splice(i, 1);
                  }
                }
              }
            }
            if (!fns.length) {
              delete c[eventName];
            }
          });
        }), self) : self;
      };
      /**
       * @param {string} name
       * @param {?} opt_attributes
       * @return {?}
       */
      this.trigger = function (name, opt_attributes) {
        if (name) {
          var dom = name.trim().split(".");
          var e = dom[0];
          var p = dom[1];
          var left = c[e];
          if (left) {
            left.forEach(function (event) {
              if (!(p && p !== event.namespace)) {
                event.callback.call(self, new exports.Event(e, event.namespace, self, opt_attributes));
              }
            });
          }
        }
        return self;
      };
      self.on("change.internal", function (_arg) {
        if ("loglevel" !== _arg.what) {
          if ("tweenChanges" !== _arg.what) {
            if ("triggerElement" === _arg.what) {
              load();
            } else {
              if ("reverse" === _arg.what) {
                self.update();
              }
            }
          }
        }
      }).on("shift.internal", function () {
        show();
        self.update();
      });
      /**
       * @param {?} game
       * @return {?}
       */
      this.addTo = function (game) {
        return game instanceof exports.Controller && (that != game && (that && that.removeScene(self), that = game, toString(), update(true), load(true), show(), that.info("container").addEventListener("resize", mouseup), game.addScene(self), self.trigger("add", {
          controller: that
        }), self.update())), self;
      };
      /**
       * @param {?} root
       * @return {?}
       */
      this.enabled = function (root) {
        return arguments.length ? (list != root && (list = !!root, self.update(true)), self) : list;
      };
      /**
       * @return {?}
       */
      this.remove = function () {
        if (that) {
          that.info("container").removeEventListener("resize", mouseup);
          var game = that;
          that = void 0;
          game.removeScene(self);
          self.trigger("remove");
        }
        return self;
      };
      /**
       * @param {?} async
       * @return {?}
       */
      this.destroy = function (async) {
        return self.trigger("destroy", {
          reset: async
        }), self.remove(), self.off("*.*"), null;
      };
      /**
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      this.update = function (dataAndEvents) {
        if (that) {
          if (dataAndEvents) {
            if (that.enabled() && list) {
              var x;
              var i = that.info("scrollPos");
              /** @type {number} */
              x = opts.duration > 0 ? (i - params.start) / (params.end - params.start) : i >= params.start ? 1 : 0;
              self.trigger("update", {
                startPos: params.start,
                endPos: params.end,
                scrollPos: i
              });
              self.progress(x);
            } else {
              if (node) {
                if (currentState === state) {
                  start(true);
                }
              }
            }
          } else {
            that.updateScene(self, false);
          }
        }
        return self;
      };
      /**
       * @return {?}
       */
      this.refresh = function () {
        return update(), load(), self;
      };
      /**
       * @param {number} x
       * @return {?}
       */
      this.progress = function (x) {
        if (arguments.length) {
          /** @type {boolean} */
          var fixGetAttribute = false;
          var value = currentState;
          var scrollDirection = that ? that.info("scrollDirection") : "PAUSED";
          var i = opts.reverse || x >= scale;
          if (0 === opts.duration ? (fixGetAttribute = scale != x, scale = 1 > x && i ? 0 : 1, currentState = 0 === scale ? WAITING : state) : 0 > x && (currentState !== WAITING && i) ? (scale = 0, currentState = WAITING, fixGetAttribute = true) : x >= 0 && (1 > x && i) ? (scale = x, currentState = state, fixGetAttribute = true) : x >= 1 && currentState !== CLOSED ? (scale = 1, currentState = CLOSED, fixGetAttribute = true) : currentState !== state || (i || start()), fixGetAttribute) {
            var data = {
              progress: scale,
              state: currentState,
              scrollDirection: scrollDirection
            };
            /** @type {boolean} */
            var changed = currentState != value;
            /**
             * @param {string} type
             * @return {undefined}
             */
            var animate = function (type) {
              self.trigger(type, data);
            };
            if (changed) {
              if (value !== state) {
                animate("enter");
                animate(value === WAITING ? "start" : "end");
              }
            }
            animate("progress");
            if (changed) {
              if (currentState !== state) {
                animate(currentState === WAITING ? "start" : "end");
                animate("leave");
              }
            }
          }
          return self;
        }
        return scale;
      };
      /**
       * @return {undefined}
       */
      var show = function () {
        params = {
          start: dest + opts.offset
        };
        if (that) {
          if (opts.triggerElement) {
            params.start -= that.info("size") * opts.triggerHook;
          }
        }
        params.end = params.start + opts.duration;
      };
      /**
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      var update = function (dataAndEvents) {
        if (fn) {
          /** @type {string} */
          var what = "duration";
          if (isArray(what, fn.call(self))) {
            if (!dataAndEvents) {
              self.trigger("change", {
                what: what,
                newval: opts[what]
              });
              self.trigger("shift", {
                reason: what
              });
            }
          }
        }
      };
      /**
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      var load = function (dataAndEvents) {
        /** @type {number} */
        var mat = 0;
        var target = opts.triggerElement;
        if (that && target) {
          var o = that.info();
          var prev = $.get.offset(o.container);
          /** @type {string} */
          var prop = o.vertical ? "top" : "left";
          for (; target.parentNode.hasAttribute(name);) {
            target = target.parentNode;
          }
          var next = $.get.offset(target);
          if (!o.isDocument) {
            prev[prop] -= that.scrollPos();
          }
          /** @type {number} */
          mat = next[prop] - prev[prop];
        }
        /** @type {boolean} */
        var isType = mat != dest;
        /** @type {number} */
        dest = mat;
        if (isType) {
          if (!dataAndEvents) {
            self.trigger("shift", {
              reason: "triggerElementPosition"
            });
          }
        }
      };
      /**
       * @return {undefined}
       */
      var mouseup = function () {
        if (opts.triggerHook > 0) {
          self.trigger("shift", {
            reason: "containerResize"
          });
        }
      };
      var scrubbed = $.extend(config.validate, {
        /**
         * @param {Object} duration
         * @return {?}
         */
        duration: function (duration) {
          if ($.type.String(duration) && duration.match(/^(\.|\d)*\d+%$/)) {
            /** @type {number} */
            var size = parseFloat(duration) / 100;
            /**
             * @return {?}
             */
            duration = function () {
              return that ? that.info("size") * size : 0;
            };
          }
          if ($.type.Function(duration)) {
            /** @type {Object} */
            fn = duration;
            try {
              /** @type {number} */
              duration = parseFloat(fn());
            } catch (n) {
              /** @type {number} */
              duration = -1;
            }
          }
          if (duration = parseFloat(duration), !$.type.Number(duration) || 0 > duration) {
            throw fn ? (fn = void 0, 0) : 0;
          }
          return duration;
        }
      });
      /**
       * @param {Object} name
       * @return {undefined}
       */
      var toString = function (name) {
        /** @type {Array} */
        name = arguments.length ? [name] : Object.keys(scrubbed);
        name.forEach(function (opt) {
          var value;
          if (scrubbed[opt]) {
            try {
              value = scrubbed[opt](opts[opt]);
            } catch (n) {
              value = defaults[opt];
            } finally {
              opts[opt] = value;
            }
          }
        });
      };
      /**
       * @param {string} name
       * @param {?} value
       * @return {?}
       */
      var isArray = function (name, value) {
        /** @type {boolean} */
        var errorGiven = false;
        var val = opts[name];
        return opts[name] != value && (opts[name] = value, toString(name), errorGiven = val != opts[name]), errorGiven;
      };
      /**
       * @param {string} what
       * @return {undefined}
       */
      var isUndefined = function (what) {
        if (!self[what]) {
          /**
           * @param {?} isXML
           * @return {?}
           */
          self[what] = function (isXML) {
            return arguments.length ? ("duration" === what && (fn = void 0), isArray(what, isXML) && (self.trigger("change", {
              what: what,
              newval: opts[what]
            }), config.shifts.indexOf(what) > -1 && self.trigger("shift", {
              reason: what
            })), self) : opts[what];
          };
        }
      };
      /**
       * @return {?}
       */
      this.controller = function () {
        return that;
      };
      /**
       * @return {?}
       */
      this.state = function () {
        return currentState;
      };
      /**
       * @return {?}
       */
      this.scrollOffset = function () {
        return params.start;
      };
      /**
       * @return {?}
       */
      this.triggerPosition = function () {
        var start = opts.offset;
        return that && (start += opts.triggerElement ? dest : that.info("size") * self.triggerHook()), start;
      };
      var node;
      var options;
      self.on("shift.internal", function (err) {
        /** @type {boolean} */
        var duration = "duration" === err.reason;
        if (currentState === CLOSED && duration || currentState === state && 0 === opts.duration) {
          start();
        }
        if (duration) {
          init();
        }
      }).on("progress.internal", function () {
        start();
      }).on("add.internal", function () {
        init();
      }).on("destroy.internal", function (record) {
        self.removePin(record.reset);
      });
      /**
       * @param {boolean} dataAndEvents
       * @return {undefined}
       */
      var start = function (dataAndEvents) {
        if (node && that) {
          var settings = that.info();
          var attributes = options.spacer.firstChild;
          if (dataAndEvents || currentState !== state) {
            var style = {
              position: options.inFlow ? "relative" : "absolute",
              top: 0,
              left: 0
            };
            /** @type {boolean} */
            var s = $.css(attributes, "position") != style.position;
            if (options.pushFollowers) {
              if (opts.duration > 0) {
                if (currentState === CLOSED && 0 === parseFloat($.css(options.spacer, "padding-top"))) {
                  /** @type {boolean} */
                  s = true;
                } else {
                  if (currentState === WAITING) {
                    if (0 === parseFloat($.css(options.spacer, "padding-bottom"))) {
                      /** @type {boolean} */
                      s = true;
                    }
                  }
                }
              }
            } else {
              /** @type {number} */
              style[settings.vertical ? "top" : "left"] = opts.duration * scale;
            }
            $.css(attributes, style);
            if (s) {
              init();
            }
          } else {
            if ("fixed" != $.css(attributes, "position")) {
              $.css(attributes, {
                position: "fixed"
              });
              init();
            }
            var pos = $.get.offset(options.spacer, true);
            /** @type {number} */
            var trunkLen = opts.reverse || 0 === opts.duration ? settings.scrollPos - params.start : Math.round(scale * opts.duration * 10) / 10;
            pos[settings.vertical ? "top" : "left"] += trunkLen;
            $.css(options.spacer.firstChild, {
              top: pos.top,
              left: pos.left
            });
          }
        }
      };
      /**
       * @return {undefined}
       */
      var init = function () {
        if (node && (that && options.inFlow)) {
          /** @type {boolean} */
          var layer = currentState === state;
          var reverse = that.info("vertical");
          var start = options.spacer.firstChild;
          var height = $.isMarginCollapseType($.css(options.spacer, "display"));
          var style = {};
          if (options.relSize.width || options.relSize.autoFullWidth) {
            if (layer) {
              $.css(node, {
                width: $.get.width(options.spacer)
              });
            } else {
              $.css(node, {
                width: "100%"
              });
            }
          } else {
            style["min-width"] = $.get.width(reverse ? node : start, true, true);
            style.width = layer ? style["min-width"] : "auto";
          }
          if (options.relSize.height) {
            if (layer) {
              $.css(node, {
                height: $.get.height(options.spacer) - (options.pushFollowers ? opts.duration : 0)
              });
            } else {
              $.css(node, {
                height: "100%"
              });
            }
          } else {
            style["min-height"] = $.get.height(reverse ? start : node, true, !height);
            style.height = layer ? style["min-height"] : "auto";
          }
          if (options.pushFollowers) {
            /** @type {number} */
            style["padding" + (reverse ? "Top" : "Left")] = opts.duration * scale;
            /** @type {number} */
            style["padding" + (reverse ? "Bottom" : "Right")] = opts.duration * (1 - scale);
          }
          $.css(options.spacer, style);
        }
      };
      /**
       * @return {undefined}
       */
      var completed = function () {
        if (that) {
          if (node) {
            if (currentState === state) {
              if (!that.info("isDocument")) {
                start();
              }
            }
          }
        }
      };
      /**
       * @return {undefined}
       */
      var onWindowResize = function () {
        if (that) {
          if (node) {
            if (currentState === state) {
              if ((options.relSize.width || options.relSize.autoFullWidth) && $.get.width(window) != $.get.width(options.spacer.parentNode) || options.relSize.height && $.get.height(window) != $.get.height(options.spacer.parentNode)) {
                init();
              }
            }
          }
        }
      };
      /**
       * @param {Object} event
       * @return {undefined}
       */
      var handler = function (event) {
        if (that) {
          if (node) {
            if (currentState === state) {
              if (!that.info("isDocument")) {
                event.preventDefault();
                that._setScrollPos(that.info("scrollPos") - ((event.wheelDelta || event[that.info("vertical") ? "wheelDeltaY" : "wheelDeltaX"]) / 3 || 30 * -event.detail));
              }
            }
          }
        }
      };
      /**
       * @param {Object} parent
       * @param {Text} vars
       * @return {?}
       */
      this.setPin = function (parent, vars) {
        var defaults = {
          pushFollowers: true,
          spacerClass: "scrollmagic-pin-spacer"
        };
        if (vars = $.extend({}, defaults, vars), parent = $.get.elements(parent)[0], !parent) {
          return self;
        }
        if ("fixed" === $.css(parent, "position")) {
          return self;
        }
        if (node) {
          if (node === parent) {
            return self;
          }
          self.removePin();
        }
        /** @type {Object} */
        node = parent;
        var gutterDisplay = node.parentNode.style.display;
        /** @type {Array} */
        var directions = ["top", "left", "bottom", "right", "margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
        /** @type {string} */
        node.parentNode.style.display = "none";
        /** @type {boolean} */
        var _mustShow = "absolute" != $.css(node, "position");
        var data = $.css(node, directions.concat(["display"]));
        var file = $.css(node, ["width", "height"]);
        node.parentNode.style.display = gutterDisplay;
        if (!_mustShow) {
          if (vars.pushFollowers) {
            /** @type {boolean} */
            vars.pushFollowers = false;
          }
        }
        var elm = node.parentNode.insertBefore(document.createElement("div"), node);
        var color = $.extend(data, {
          position: _mustShow ? "relative" : "absolute",
          boxSizing: "content-box",
          mozBoxSizing: "content-box",
          webkitBoxSizing: "content-box"
        });
        if (_mustShow || $.extend(color, $.css(node, ["width", "height"])), $.css(elm, color), elm.setAttribute(name, ""), $.addClass(elm, vars.spacerClass), options = {
            spacer: elm,
            relSize: {
              width: "%" === file.width.slice(-1),
              height: "%" === file.height.slice(-1),
              autoFullWidth: "auto" === file.width && (_mustShow && $.isMarginCollapseType(data.display))
            },
            pushFollowers: vars.pushFollowers,
            inFlow: _mustShow
          }, !node.___origStyle) {
          node.___origStyle = {};
          var s = node.style;
          /** @type {Array} */
          var asserterNames = directions.concat(["width", "height", "position", "boxSizing", "mozBoxSizing", "webkitBoxSizing"]);
          asserterNames.forEach(function (prop) {
            node.___origStyle[prop] = s[prop] || "";
          });
        }
        return options.relSize.width && $.css(elm, {
          width: file.width
        }), options.relSize.height && $.css(elm, {
          height: file.height
        }), elm.appendChild(node), $.css(node, {
          position: _mustShow ? "relative" : "absolute",
          margin: "auto",
          top: "auto",
          left: "auto",
          bottom: "auto",
          right: "auto"
        }), (options.relSize.width || options.relSize.autoFullWidth) && $.css(node, {
          boxSizing: "border-box",
          mozBoxSizing: "border-box",
          webkitBoxSizing: "border-box"
        }), window.addEventListener("scroll", completed), window.addEventListener("resize", completed), window.addEventListener("resize", onWindowResize), node.addEventListener("mousewheel", handler), node.addEventListener("DOMMouseScroll", handler), start(), self;
      };
      /**
       * @param {boolean} reset
       * @return {?}
       */
      this.removePin = function (reset) {
        if (node) {
          if (currentState === state && start(true), reset || !that) {
            var elem = options.spacer.firstChild;
            if (elem.hasAttribute(name)) {
              var elemStyle = options.spacer.style;
              /** @type {Array} */
              var asserterNames = ["margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
              margins = {};
              asserterNames.forEach(function (key) {
                margins[key] = elemStyle[key] || "";
              });
              $.css(elem, margins);
            }
            options.spacer.parentNode.insertBefore(elem, options.spacer);
            options.spacer.parentNode.removeChild(options.spacer);
            if (!node.parentNode.hasAttribute(name)) {
              $.css(node, node.___origStyle);
              delete node.___origStyle;
            }
          }
          window.removeEventListener("scroll", completed);
          window.removeEventListener("resize", completed);
          window.removeEventListener("resize", onWindowResize);
          node.removeEventListener("mousewheel", handler);
          node.removeEventListener("DOMMouseScroll", handler);
          node = void 0;
        }
        return self;
      };
      var className;
      /** @type {Array} */
      var assertions = [];
      return self.on("destroy.internal", function (record) {
        self.removeClassToggle(record.reset);
      }), this.setClassToggle = function (walkers, isXML) {
        var codeSegments = $.get.elements(walkers);
        return 0 !== codeSegments.length && $.type.String(isXML) ? (assertions.length > 0 && self.removeClassToggle(), className = isXML, assertions = codeSegments, self.on("enter.internal_class leave.internal_class", function (event) {
          var animateClose = "enter" === event.type ? $.addClass : $.removeClass;
          assertions.forEach(function (checkSet) {
            animateClose(checkSet, className);
          });
        }), self) : self;
      }, this.removeClassToggle = function (dataAndEvents) {
        return dataAndEvents && assertions.forEach(function (klass) {
          $.removeClass(klass, className);
        }), self.off("start.internal_class end.internal_class"), className = void 0, assertions = [], self;
      }, add(), self;
    };
    var config = {
      defaults: {
        duration: 0,
        offset: 0,
        triggerElement: void 0,
        triggerHook: 0.5,
        reverse: true,
        loglevel: 2
      },
      validate: {
        /**
         * @param {(number|string)} value
         * @return {?}
         */
        offset: function (value) {
          if (value = parseFloat(value), !$.type.Number(value)) {
            throw 0;
          }
          return value;
        },
        /**
         * @param {Object} selector
         * @return {?}
         */
        triggerElement: function (selector) {
          if (selector = selector || void 0) {
            var until = $.get.elements(selector)[0];
            if (!until) {
              throw 0;
            }
            selector = until;
          }
          return selector;
        },
        /**
         * @param {(number|string)} m
         * @return {?}
         */
        triggerHook: function (m) {
          var o = {
            onCenter: 0.5,
            onEnter: 1,
            onLeave: 0
          };
          if ($.type.Number(m)) {
            /** @type {number} */
            m = Math.max(0, Math.min(parseFloat(m), 1));
          } else {
            if (!(m in o)) {
              throw 0;
            }
            m = o[m];
          }
          return m;
        },
        /**
         * @param {?} pos
         * @return {?}
         */
        reverse: function (pos) {
          return !!pos;
        }
      },
      shifts: ["duration", "offset", "triggerHook"]
    };
    /**
     * @param {string} key
     * @param {boolean} value
     * @param {Function} val
     * @param {?} selectbox
     * @return {undefined}
     */
    exports.Scene.addOption = function (key, value, val, selectbox) {
      if (!(key in config.defaults)) {
        /** @type {boolean} */
        config.defaults[key] = value;
        /** @type {Function} */
        config.validate[key] = val;
        if (selectbox) {
          config.shifts.push(key);
        }
      }
    };
    /**
     * @param {Function} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    exports.Scene.extend = function (expectedNumberOfNonCommentArgs) {
      var base = this;
      /**
       * @return {?}
       */
      exports.Scene = function () {
        return base.apply(this, arguments), this.$super = $.extend({}, this), expectedNumberOfNonCommentArgs.apply(this, arguments) || this;
      };
      $.extend(exports.Scene, base);
      exports.Scene.prototype = base.prototype;
      /** @type {function (): ?} */
      exports.Scene.prototype.constructor = exports.Scene;
    };
    /**
     * @param {string} type
     * @param {Object} opt_target
     * @param {EventTarget} target
     * @param {Object} helper
     * @return {?}
     */
    exports.Event = function (type, opt_target, target, helper) {
      helper = helper || {};
      var key;
      for (key in helper) {
        this[key] = helper[key];
      }
      return this.type = type, this.target = this.currentTarget = target, this.namespace = opt_target || "", this.timeStamp = this.timestamp = Date.now(), this;
    };
    var $ = exports._util = function (win) {
      var i;
      var me = {};
      /**
       * @param {?} val
       * @return {?}
       */
      var toPixel = function (val) {
        return parseFloat(val) || 0;
      };
      /**
       * @param {Object} el
       * @return {?}
       */
      var getStyle = function (el) {
        return el.currentStyle ? el.currentStyle : win.getComputedStyle(el);
      };
      /**
       * @param {string} name
       * @param {Object} element
       * @param {boolean} deepDataAndEvents
       * @param {boolean} dataAndEvents
       * @return {?}
       */
      var log = function (name, element, deepDataAndEvents, dataAndEvents) {
        if (element = element === document ? win : element, element === win) {
          /** @type {boolean} */
          dataAndEvents = false;
        } else {
          if (!$.DomElement(element)) {
            return 0;
          }
        }
        name = name.charAt(0).toUpperCase() + name.substr(1).toLowerCase();
        var n = (deepDataAndEvents ? element["offset" + name] || element["outer" + name] : element["client" + name] || element["inner" + name]) || 0;
        if (deepDataAndEvents && dataAndEvents) {
          var style = getStyle(element);
          n += "Height" === name ? toPixel(style.marginTop) + toPixel(style.marginBottom) : toPixel(style.marginLeft) + toPixel(style.marginRight);
        }
        return n;
      };
      /**
       * @param {string} s
       * @return {?}
       */
      var camelize = function (s) {
        return s.replace(/^[^a-z]+([a-z])/g, "$1").replace(/-([a-z])/g, function (m) {
          return m[1].toUpperCase();
        });
      };
      /**
       * @param {Object} dest
       * @return {?}
       */
      me.extend = function (dest) {
        dest = dest || {};
        /** @type {number} */
        i = 1;
        for (; i < arguments.length; i++) {
          if (arguments[i]) {
            var prop;
            for (prop in arguments[i]) {
              if (arguments[i].hasOwnProperty(prop)) {
                dest[prop] = arguments[i][prop];
              }
            }
          }
        }
        return dest;
      };
      /**
       * @param {?} existingFn
       * @return {?}
       */
      me.isMarginCollapseType = function (existingFn) {
        return ["block", "flex", "list-item", "table", "-webkit-box"].indexOf(existingFn) > -1;
      };
      /** @type {number} */
      var lastTime = 0;
      /** @type {Array} */
      var vendors = ["ms", "moz", "webkit", "o"];
      /** @type {function (this:Window, function (number): ?, (Element|null)=): number} */
      var raf = win.requestAnimationFrame;
      /** @type {function (this:Window, number): ?} */
      var cancelAnimationFrame = win.cancelAnimationFrame;
      /** @type {number} */
      i = 0;
      for (; !raf && i < vendors.length; ++i) {
        raf = win[vendors[i] + "RequestAnimationFrame"];
        cancelAnimationFrame = win[vendors[i] + "CancelAnimationFrame"] || win[vendors[i] + "CancelRequestAnimationFrame"];
      }
      if (!raf) {
        /**
         * @param {?} callback
         * @return {?}
         */
        raf = function (callback) {
          /** @type {number} */
          var currTime = (new Date).getTime();
          /** @type {number} */
          var timeToCall = Math.max(0, 16 - (currTime - lastTime));
          /** @type {number} */
          var id = win.setTimeout(function () {
            callback(currTime + timeToCall);
          }, timeToCall);
          return lastTime = currTime + timeToCall, id;
        };
      }
      if (!cancelAnimationFrame) {
        /**
         * @param {?} id
         * @return {undefined}
         */
        cancelAnimationFrame = function (id) {
          win.clearTimeout(id);
        };
      }
      me.rAF = raf.bind(win);
      me.cAF = cancelAnimationFrame.bind(win);
      /** @type {function (Function): ?} */
      var $ = me.type = function (obj) {
        return Object.prototype.toString.call(obj).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
      };
      /**
       * @param {Object} value
       * @return {?}
       */
      $.String = function (value) {
        return "string" === $(value);
      };
      /**
       * @param {Function} obj
       * @return {?}
       */
      $.Function = function (obj) {
        return "function" === $(obj);
      };
      /**
       * @param {Object} actual
       * @return {?}
       */
      $.Array = function (actual) {
        return Array.isArray(actual);
      };
      /**
       * @param {string} value
       * @return {?}
       */
      $.Number = function (value) {
        return !$.Array(value) && value - parseFloat(value) + 1 >= 0;
      };
      /**
       * @param {Node} object
       * @return {?}
       */
      $.DomElement = function (object) {
        return "object" == typeof HTMLElement ? object instanceof HTMLElement : object && ("object" == typeof object && (null !== object && (1 === object.nodeType && "string" == typeof object.nodeName)));
      };
      var d = me.get = {};
      return d.elements = function (obj) {
        /** @type {Array} */
        var result = [];
        if ($.String(obj)) {
          try {
            /** @type {NodeList} */
            obj = document.querySelectorAll(obj);
          } catch (o) {
            return result;
          }
        }
        if ("nodelist" === $(obj) || $.Array(obj)) {
          /** @type {number} */
          var n = 0;
          var order = result.length = obj.length;
          for (; order > n; n++) {
            var v = obj[n];
            result[n] = $.DomElement(v) ? v : d.elements(v);
          }
        } else {
          if ($.DomElement(obj) || (obj === document || obj === win)) {
            /** @type {Array} */
            result = [obj];
          }
        }
        return result;
      }, d.scrollTop = function (e) {
        return e && "number" == typeof e.scrollTop ? e.scrollTop : win.pageYOffset || 0;
      }, d.scrollLeft = function (el) {
        return el && "number" == typeof el.scrollLeft ? el.scrollLeft : win.pageXOffset || 0;
      }, d.width = function (el, deepDataAndEvents, dataAndEvents) {
        return log("width", el, deepDataAndEvents, dataAndEvents);
      }, d.height = function (el, deepDataAndEvents, dataAndEvents) {
        return log("height", el, deepDataAndEvents, dataAndEvents);
      }, d.offset = function (parent, dataAndEvents) {
        var pos = {
          top: 0,
          left: 0
        };
        if (parent && parent.getBoundingClientRect) {
          var box = parent.getBoundingClientRect();
          pos.top = box.top;
          pos.left = box.left;
          if (!dataAndEvents) {
            pos.top += d.scrollTop();
            pos.left += d.scrollLeft();
          }
        }
        return pos;
      }, me.addClass = function (name, className) {
        if (className) {
          if (name.classList) {
            name.classList.add(className);
          } else {
            name.className += " " + className;
          }
        }
      }, me.removeClass = function (value, names) {
        if (names) {
          if (value.classList) {
            value.classList.remove(names);
          } else {
            value.className = value.className.replace(RegExp("(^|\\b)" + names.split(" ").join("|") + "(\\b|$)", "gi"), " ");
          }
        }
      }, me.css = function (opt_attributes, value) {
        if ($.String(value)) {
          return getStyle(opt_attributes)[camelize(value)];
        }
        if ($.Array(value)) {
          var cache = {};
          var data = getStyle(opt_attributes);
          return value.forEach(function (k) {
            cache[k] = data[camelize(k)];
          }), cache;
        }
        var p;
        for (p in value) {
          var val = value[p];
          if (val == parseFloat(val)) {
            val += "px";
          }
          opt_attributes.style[camelize(p)] = val;
        }
      }, me;
    }(window || {});
    return exports;
  }),
  function (globals, mod) {
    if ("function" == typeof define && define.amd) {
      define(["ScrollMagic", "TweenMax", "TimelineMax"], mod);
    } else {
      if ("object" == typeof exports) {
        require("gsap");
        mod(require("scrollmagic"), TweenMax, TimelineMax);
      } else {
        mod(globals.ScrollMagic || globals.jQuery && globals.jQuery.ScrollMagic, globals.TweenMax || globals.TweenLite, globals.TimelineMax || globals.TimelineLite);
      }
    }
  }(this, function (Odin, that, asNumber) {
    /** @type {string} */
    var o = "animation.gsap";
    /** @type {(Console|{})} */
    var logger = window.console || {};
    var throttledUpdate = Function.prototype.bind.call(logger.error || (logger.log || function () {}), logger);
    if (!Odin) {
      throttledUpdate("(" + o + ") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs.");
    }
    if (!that) {
      throttledUpdate("(" + o + ") -> ERROR: TweenLite or TweenMax could not be found. Please make sure GSAP is loaded before ScrollMagic or use an asynchronous loader like requirejs.");
    }
    Odin.Scene.addOption("tweenChanges", false, function (dataAndEvents) {
      return !!dataAndEvents;
    });
    Odin.Scene.extend(function () {
      var options = this;
      var self;
      /**
       * @return {undefined}
       */
      var isArray = function () {
        if (options._log) {
          Array.prototype.splice.call(arguments, 1, 0, "(" + o + ")", "->");
          options._log.apply(this, arguments);
        }
      };
      options.on("progress.plugin_gsap", function () {
        checkScrollAnim();
      });
      options.on("destroy.plugin_gsap", function (item) {
        options.removeTween(item.reset);
      });
      /**
       * @return {undefined}
       */
      var checkScrollAnim = function () {
        if (self) {
          var x = options.progress();
          var DURING = options.state();
          if (self.repeat && -1 === self.repeat()) {
            if ("DURING" === DURING && self.paused()) {
              self.play();
            } else {
              if (!("DURING" === DURING)) {
                if (!self.paused()) {
                  self.pause();
                }
              }
            }
          } else {
            if (x != self.progress()) {
              if (0 === options.duration()) {
                if (x > 0) {
                  self.play();
                } else {
                  self.reverse();
                }
              } else {
                if (options.tweenChanges() && self.tweenTo) {
                  self.tweenTo(x * self.duration());
                } else {
                  self.progress(x).pause();
                }
              }
            }
          }
        }
      };
      /**
       * @param {Object} value
       * @param {number} duration
       * @param {number} callback
       * @return {?}
       */
      options.setTween = function (value, duration, callback) {
        var me;
        if (arguments.length > 1) {
          if (arguments.length < 3) {
            /** @type {number} */
            callback = duration;
            /** @type {number} */
            duration = 1;
          }
          value = that.to(value, duration, callback);
        }
        try {
          me = asNumber ? (new asNumber({
            smoothChildTiming: true
          })).add(value) : value;
          me.pause();
        } catch (d) {
          return isArray(1, "ERROR calling method 'setTween()': Supplied argument is not a valid TweenObject"), options;
        }
        if (self && options.removeTween(), self = me, value.repeat && (-1 === value.repeat() && (self.repeat(-1), self.yoyo(value.yoyo()))), options.tweenChanges() && (!self.tweenTo && isArray(2, "WARNING: tweenChanges will only work if the TimelineMax object is available for ScrollMagic.")), self && (options.controller() && (options.triggerElement() && options.loglevel() >= 2))) {
          var asserterNames = that.getTweensOf(options.triggerElement());
          var showMessage = options.controller().info("vertical");
          asserterNames.forEach(function (data, dataAndEvents) {
            var paddingBox = data.vars.css || data.vars;
            /** @type {boolean} */
            var body = showMessage ? void 0 !== paddingBox.top || void 0 !== paddingBox.bottom : void 0 !== paddingBox.left || void 0 !== paddingBox.right;
            return body ? (isArray(2, "WARNING: Tweening the position of the trigger element affects the scene timing and should be avoided!"), false) : void 0;
          });
        }
        if (parseFloat(TweenLite.version) >= 1.14) {
          var codeSegments = self.getChildren ? self.getChildren(true, true, false) : [self];
          /**
           * @return {undefined}
           */
          var matcherFunction = function () {
            isArray(2, "WARNING: tween was overwritten by another. To learn how to avoid this issue see here: https://github.com/janpaepke/ScrollMagic/wiki/WARNING:-tween-was-overwritten-by-another");
          };
          /** @type {number} */
          var i = 0;
          var cur;
          var __method;
          for (; i < codeSegments.length; i++) {
            cur = codeSegments[i];
            if (__method !== matcherFunction) {
              __method = cur.vars.onOverwrite;
              /**
               * @return {undefined}
               */
              cur.vars.onOverwrite = function () {
                if (__method) {
                  __method.apply(this, arguments);
                }
                matcherFunction.apply(this, arguments);
              };
            }
          }
        }
        return isArray(3, "added tween"), checkScrollAnim(), options;
      };
      /**
       * @param {(boolean|number|string)} object
       * @return {?}
       */
      options.removeTween = function (object) {
        return self && (object && self.progress(0).pause(), self.kill(), self = void 0, isArray(3, "removed tween (reset: " + (object ? "true" : "false") + ")")), options;
      };
    });
  }),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        nav: "nav",
        open_nav: ".open-nav",
        close_nav: ".close-nav"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        open_nav: function () {
          self.elements.nav.addClass("open");
          $("html, body").animate({
            scrollTop: 0
          }, 0);
          self.elements.body.addClass("menu-open");
        },
        /**
         * @return {undefined}
         */
        close_nav: function () {
          self.elements.nav.removeClass("open");
          self.elements.body.removeClass("menu-open");
        },
        /**
         * @return {undefined}
         */
        resize_close_nav: function () {
          if (window.innerWidth <= 992) {
            self.methods.close_nav();
          }
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click.close_nav": {
          element: self.elements.close_nav,
          action: self.methods.close_nav
        },
        "click.open_nav": {
          element: self.elements.open_nav,
          action: self.methods.open_nav
        },
        "resize.close_nav": {
          element: self.elements.window,
          action: self.methods.resize_close_nav
        }
      });
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        window: window,
        document: document,
        html: "html",
        body: "body",
        header: "header",
        footer: "footer",
        back_to_top: ".back-to-top",
        stop_propagation: ".stop-propagation",
        prevent_default: ".prevent-default"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @param {number} recurring
         * @param {Function} opt_attributes
         * @return {undefined}
         */
        _scroll_to: function (recurring, opt_attributes) {
          self.elements.body.add(self.elements.html).animate({
            scrollTop: recurring
          }, {
            /** @type {Function} */
            duration: opt_attributes,
            easing: "easeOutQuint"
          });
        },
        /**
         * @param {Object} dom
         * @return {undefined}
         */
        _back_to_top: function (dom) {
          dom.preventDefault();
          self.methods._scroll_to(0, 550);
        },
        /**
         * @param {Object} key
         * @return {undefined}
         */
        _keydown_events: function (key) {
          var code = key.keyCode;
          switch (code) {
            case 27:
              self.elements.body.trigger(window.object_name + ".html_esc");
          }
        },
        /**
         * @return {undefined}
         */
        _html_click_events: function () {
          self.elements.window.trigger(window.object_name + ".html_click", self);
        },
        /**
         * @param {?} event
         * @return {undefined}
         */
        _stop_propagation: function (event) {
          event.stopPropagation();
        },
        /**
         * @param {?} types
         * @return {undefined}
         */
        _prevent_default: function (types) {
          types.preventDefault();
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click._back_to_top": {
          element: self.elements.back_to_top,
          action: self.methods._back_to_top
        },
        "keydown._keydown_events": {
          element: self.elements.html,
          action: self.methods._keydown_events
        },
        "click._html_click_events": {
          element: self.elements.html,
          action: self.methods._html_click_events
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, response) {
      response.elements.body.delegate(".stop-propagation", "click._stop_propagation", response.methods._stop_propagation);
      response.elements.body.delegate(".prevent-default", "click._prevent_default", response.methods._prevent_default);
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        mobile: {
          /**
           * @return {?}
           */
          _is_browser_mobile: function () {
            /** @type {boolean} */
            var e = false;
            return function (cssText) {
              if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(cssText) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(cssText.substr(0,
                  4))) {
                /** @type {boolean} */
                e = true;
              }
            }(navigator.userAgent || (navigator.vendor || window.opera)), e;
          },
          /**
           * @return {undefined}
           */
          _set_mobile: function () {
            var e = self.methods.mobile._is_browser_mobile();
            if (e) {
              $("body").addClass("mobile");
            } else {
              $("body").removeClass("mobile");
            }
          },
          /**
           * @param {number} i
           * @return {?}
           */
          _is_mobile: function (i) {
            if (!i) {
              var api = "object" != typeof self.elements.body ? $("body") : self.elements.body;
              if (api.hasClass("mobile")) {
                return true;
              }
            }
            return i = i ? i : 320, window.innerWidth <= i ? true : false;
          },
          /**
           * @param {number} w
           * @param {string} errorMessage
           * @return {?}
           */
          _is_width: function (w, errorMessage) {
            switch (w = w ? w : 991, errorMessage = errorMessage ? errorMessage : "smaller", w) {
              case "screen-lg":
                /** @type {number} */
                w = 1200;
                break;
              case "screen-md":
                /** @type {number} */
                w = 992;
                break;
              case "screen-sm":
                /** @type {number} */
                w = 768;
                break;
              case "screen-xs":
                /** @type {number} */
                w = 480;
                break;
              default:
                /** @type {number} */
                w = 480;
            }
            switch (errorMessage) {
              case "larger":
                if (window.innerWidth > w) {
                  return true;
                }
                break;
              case "smaller":
                if (window.innerWidth < w) {
                  return true;
                }
                break;
              default:
                if (window.innerWidth < w) {
                  return true;
                };
            }
            return false;
          }
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, data) {
      data.methods.mobile._set_mobile();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        parallax: ".parallax"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        _run_lax: function () {
          window.requestAnimationFrame(self.methods.parallax);
        },
        /**
         * @return {undefined}
         */
        parallax: function () {
          self.elements.parallax.each(function () {
            var elem = $(this);
            /** @type {number} */
            var t = 0;
            /** @type {number} */
            var toSize = 0;
            /** @type {number} */
            var y = window.scrollY;
            /** @type {boolean} */
            var i = true;
            switch (elem.data("layer")) {
              case 1:
                /** @type {string} */
                toSize = Math.floor(0.5 * y) + "px";
                break;
              case 2:
                /** @type {boolean} */
                i = false;
                elem.css("opacity", (100 - y / 10) / 100);
                break;
              case 3:
                /** @type {number} */
                var x = 100;
                /** @type {string} */
                t = "-20%";
                if (window.innerWidth <= 992) {
                  /** @type {string} */
                  t = "0%";
                }
                /** @type {string} */
                toSize = Math.floor(0.4 * y + x) + "px";
                break;
              case 4:
                /** @type {string} */
                toSize = Math.floor(0.3 * y - 20) + "px";
                break;
              case 5:
                /** @type {boolean} */
                i = false;
                elem.css("opacity", (100 - y / 2) / 100);
            }
            if (i) {
              elem.stop().css({
                "-webkit-transform": "translate3D(" + t + ", " + toSize + ", 0)",
                "-moz-transform": "translate3D(" + t + ", " + toSize + ", 0)",
                "-o-transform": "translate3D(" + t + ", " + toSize + ", 0)",
                "-ms-transform": "translate3D(" + t + ", " + toSize + ", 0)",
                transform: "translate3D(" + t + ", " + toSize + ", 0)"
              });
            }
          });
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      /** @type {function (this:Window, function (number): ?, (Element|null)=): number} */
      window.requestAnimationFrame = window.requestAnimationFrame || (window.mozRequestAnimationFrame || (window.webkitRequestAnimationFrame || window.oRequestAnimationFrame));
      self.methods._add("events", {
        "scroll.parallax": {
          element: self.elements.window,
          action: self.methods._run_lax
        },
        "resize.parallax": {
          element: self.elements.window,
          action: self.methods._run_lax
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods._run_lax();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        master_col: ".master-col",
        slave_col: ".slave-col",
        balance: '[data-layout="balance"]'
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        align_cols: function () {
          self.elements.slave_col.each(function () {
            var page = $(this);
            var footer = page.next(".master-col");
            if (!footer.length) {
              footer = page.prev(".master-col");
            }
            if (footer.length) {
              page.css("min-height", footer.outerHeight());
            }
          });
        },
        /**
         * @return {undefined}
         */
        balance_cols: function () {
          self.elements.balance.each(function () {
            var target = $(this);
            var res = target.children('[data-layout="col"]');
            res.css("height", "");
            if (!(target.hasClass("no-mobile-adjust") && self.methods.mobile._is_mobile(992))) {
              res.css("height", parseInt(target.innerHeight(), 10) - parseInt(target.css("paddingTop"), 10));
            }
          });
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        align_cols: {
          element: self.elements.window,
          action: self.methods.align_cols
        },
        "resize.lineup_discover_cols": {
          element: self.elements.window,
          action: self.methods.align_cols
        },
        "resize.balance_cols": {
          element: self.elements.window,
          action: self.methods.balance_cols
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.align_cols();
      n.methods.balance_cols();
      /** @type {number} */
      window[window.object_name].properties.balance_timeout = setTimeout(function () {
        n.methods.align_cols();
        n.methods.balance_cols();
      }, 5E3);
      /** @type {number} */
      window[window.object_name].properties.balance_interval_c = 0;
      /** @type {number} */
      window[window.object_name].properties.balance_interval = setTimeout(function () {
        n.methods.align_cols();
        n.methods.balance_cols();
        window[window.object_name].properties.balance_interval_c++;
        if (window[window.object_name].properties.balance_interval_c > 10) {
          clearInterval(window[window.object_name].properties.balance_interval);
        }
      }, 100);
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        smooth_scroll: "a[href*=#]"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      /** @type {null} */
      window[window.object_name].properties.smooth_scroll = null;
      /** @type {null} */
      window[window.object_name].properties.smooth_scroll_timeout = null;
      self.methods._add("methods", {
        /**
         * @param {Object} dom
         * @return {undefined}
         */
        smooth_scroll: function (dom) {
          var $link = $(this);
          var href = $link.attr("href");
          if (0 === href.indexOf("#")) {
            dom.preventDefault();
            var link = $(href);
            /** @type {number} */
            var offsetY = 0;
            if (window.innerHeight <= 992) {
              /** @type {number} */
              offsetY = 50;
            }
            if (link.length) {
              $("html, body").animate({
                scrollTop: link.offset().top + offsetY
              }, 750);
              /** @type {boolean} */
              window[window.object_name].properties.smooth_scroll = true;
              /** @type {number} */
              window[window.object_name].properties.smooth_scroll_timeout = setTimeout(function () {
                /** @type {boolean} */
                window[window.object_name].properties.smooth_scroll = true;
              }, 750);
            }
          }
        },
        /**
         * @param {Object} e
         * @return {undefined}
         */
        stop_smooth_scroll: function (e) {
          if (window[window.object_name].properties.smooth_scroll) {
            if (e.which > 0 || ("mousedown" === e.type || "mousewheel" === e.type)) {
              $("html, body").stop();
              /** @type {boolean} */
              window[window.object_name].properties.smooth_scroll = false;
              if (window[window.object_name].properties.smooth_scroll_timeout) {
                clearTimeout(window[window.object_name].properties.smooth_scroll_timeout);
              }
            }
          }
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click.smooth_scroll": {
          element: self.elements.smooth_scroll,
          action: self.methods.smooth_scroll
        },
        stop_smooth_scroll: {
          event: "scroll mousedown DOMMouseScroll mousewheel keyup",
          element: self.elements.window,
          action: self.methods.stop_smooth_scroll
        }
      });
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        setup_instafeed: function () {
          if ($("#instafeed").length) {
            var app = new window.Instafeed({
              get: "user",
              userId: 3529285,
              accessToken: "3529285.1677ed0.f76d587a4f9446798db384153d838fd7",
              clientId: "ee432b41b8704affa5edf6ee375a40d5",
              resolution: "low_resolution",
              limit: 6,
              template: '<a href="{{link}}" target="_blank"><img src="{{image}}" /></a>'
            });
            app.run();
          }
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.setup_instafeed();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        setup_scroll_magic: function () {
          window.controller = new window.ScrollMagic.Controller;
          var udataCur = (new window.TimelineMax).fromTo("#bio .slide-2", 1, {
            x: "150%"
          }, {
            x: "0%",
            ease: window.Linear.easeNone
          }).fromTo("#bio .slide-3", 1, {
            x: "150%"
          }, {
            x: "0%",
            ease: window.Linear.easeNone
          }).fromTo("#bio .slide-4", 1, {
            x: "150%"
          }, {
            x: "0%",
            ease: window.Linear.easeNone
          });
          (new window.ScrollMagic.Scene({
            triggerElement: "#bio",
            triggerHook: "onLeave",
            duration: "300%"
          })).setPin("#bio").setTween(udataCur).addTo(window.controller);
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.setup_scroll_magic();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        advertisements: ".advertisements > a"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        ads: {
          /**
           * @return {undefined}
           */
          _select_ad: function () {
            var $items = self.elements.advertisements;
            if ($items || ($items = $(".advertisements > a")), $items.length) {
              $items.hide();
              /** @type {number} */
              var index = Math.floor(Math.random() * $items.length);
              $items.eq(index).css("display", "inline-block");
            }
          }
        }
      });
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        tab_nav: ".tab-nav > li",
        purchase_toggle: '[data-action="purchase-toggle"]'
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      /** @type {boolean} */
      window[window.object_name].properties.tab_animating = false;
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        switch_tabs: function () {
          if (!window.sharkm0de.properties.tab_animating) {
            var $target = $(this);
            var video = $target.parents("ul.tab-nav").first();
            var $selected = video.find("> li");
            var bar = video.parents(".tabs").find(".tabs-contain");
            var options = bar.find(".tab");
            var $that = options.filter(".active");
            var lastTabIndex = options.index(options.filter(".active"));
            var index = $selected.index($target);
            var el = options.eq(index);
            var url = $target.data("tab-request");
            if ("number" == typeof url && (el = options.eq(url), index = options.index(el)), el.length && !el.hasClass("active")) {
              /** @type {boolean} */
              window.sharkm0de.properties.tab_animating = true;
              $selected.removeClass("active");
              $target.addClass("active");
              /** @type {null} */
              var header = null;
              switch (header = index > lastTabIndex ? "slide-left" : "slide-right", $that.removeClass("slide-left slide-right").addClass(header), header) {
                case "slide-left":
                  /** @type {string} */
                  header = "slide-right";
                  break;
                case "slide-right":
                  /** @type {string} */
                  header = "slide-left";
              }
              el.removeClass("slide-left slide-right").addClass(header);
              $that.css({
                position: "absolute",
                opacity: 0
              });
              el.css({
                display: "block",
                position: "relative"
              });
              self.methods._align_elements();
              bar.css({
                height: el.outerHeight(true)
              });
              setTimeout(function () {
                el.removeClass("slide-left slide-right").addClass("active");
              }, 10);
              setTimeout(function () {
                options.not(el).removeClass("active").attr("style", "");
                /** @type {boolean} */
                window[window.object_name].properties.tab_animating = false;
              }, 350);
            }
          }
        },
        /**
         * @return {undefined}
         */
        set_tabs_contain_height: function () {
          var collection = $(".tabs-contain");
          collection.each(function () {
            var current = $(this);
            var contextElem = current.find(".tab");
            var footer = contextElem.filter(".active");
            if (current.parents(".tabs").hasClass("mobile") || !self.methods.mobile._is_mobile(992)) {
              current.css({
                height: "auto"
              });
              if (footer.length) {
                current.css({
                  height: footer.outerHeight(true)
                });
              } else {
                current.css({
                  height: current.outerHeight(true)
                });
              }
            }
          });
        },
        /**
         * @return {undefined}
         */
        purchase_toggle: function () {
          var ul = $(this);
          /** @type {number} */
          var newHeight = 1;
          if (ul.data("change-request")) {
            if (1 === ul.data("tab-request")) {
              /** @type {number} */
              newHeight = 0;
            }
          } else {
            ul = ul.prev("li");
          }
          ul.data("tab-request", newHeight);
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click.switch_tabs": {
          element: self.elements.tab_nav,
          action: self.methods.switch_tabs
        },
        "resize.set_tab_content_height": {
          element: self.elements.window,
          action: self.methods.set_tabs_contain_height
        },
        "load.set_tab_content_height": {
          element: self.elements.window,
          action: self.methods.set_tabs_contain_height
        },
        "click.purchase_toggle": {
          element: self.elements.purchase_toggle,
          action: self.methods.purchase_toggle
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.set_tabs_contain_height();
      /** @type {number} */
      window.set_tab_height_c = 0;
      /** @type {number} */
      window.set_tab_height = setInterval(function () {
        if (window.set_tab_height_c > 100) {
          clearInterval(window.set_tab_height);
        }
        n.methods.set_tabs_contain_height();
        window.set_tab_height_c++;
      }, 100);
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        nav: "nav.modal",
        menu: "nav.modal .menu",
        menu_inner: "nav.modal .menu .menu-inner",
        menu_overlay: "nav.modal .overlay",
        menu_open: ".open-menu",
        menu_close: ".close-menu",
        sidecar: ".sidecar:not(.cart)",
        sidecar_overlay: ".sidecar:not(.cart) + .sidecar-overlay",
        sidecar_open: '[data-action="sidecar-open"]',
        sidecar_close: '[data-action="sidecar-close"]',
        cart: ".cart",
        cart_overlay: ".cart + .cart-overlay",
        cart_open: '[data-action="cart-open"]',
        cart_close: '[data-action="cart-close"]'
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        open_menu: function () {
          self.elements.nav.css("display", "block");
          setTimeout(function () {
            self.elements.body.addClass("nav-open");
          }, 25);
        },
        /**
         * @return {undefined}
         */
        close_menu: function () {
          self.elements.body.removeClass("nav-open");
          setTimeout(function () {
            self.elements.nav.css("display", "none");
          }, 500);
        },
        /**
         * @return {undefined}
         */
        _sidecar_open: function () {
          if (self.elements.sidecar.length) {
            self.methods._cart_close();
            self.elements.sidecar_overlay.css("display", "block");
            setTimeout(function () {
              self.elements.body.addClass("sidecar-open");
            }, 25);
          }
        },
        /**
         * @return {undefined}
         */
        _sidecar_close: function () {
          if (self.elements.sidecar.length) {
            self.elements.body.removeClass("sidecar-open");
            setTimeout(function () {
              self.elements.sidecar_overlay.css("display", "none");
            }, 300);
          }
        },
        /**
         * @return {undefined}
         */
        _cart_open: function () {
          self.methods._sidecar_close();
          self.elements.cart_overlay.css("display", "block");
          setTimeout(function () {
            self.elements.body.addClass("cart-open");
          }, 25);
        },
        /**
         * @return {undefined}
         */
        _cart_close: function () {
          self.elements.body.removeClass("cart-open");
          setTimeout(function () {
            self.elements.cart_overlay.css("display", "none");
          }, 300);
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click.open_menu": {
          element: self.elements.menu_open,
          action: self.methods.open_menu
        },
        "click.menu_close": {
          element: self.elements.menu_close,
          action: self.methods.close_menu
        },
        esc_close_menu: {
          event: window.object_name + ".html_esc",
          element: self.elements.body,
          action: self.methods.close_menu
        },
        "sidecar.open": {
          event: "click._sidecar_open",
          element: self.elements.sidecar_open,
          action: self.methods._sidecar_open
        },
        "sidecar.close": {
          event: "click._sidecar_close",
          element: self.elements.sidecar_close,
          action: self.methods._sidecar_close
        },
        "sidecar.esc": {
          event: window.object_name + ".html_esc",
          element: self.elements.body,
          action: self.methods._sidecar_close
        },
        "cart.open": {
          event: "click._cart_open",
          element: self.elements.cart_open,
          action: self.methods._cart_open
        },
        "cart.close": {
          event: "click._cart_close",
          element: self.elements.cart_close,
          action: self.methods._cart_close
        }
      });
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        modals: ".modals",
        modal: ".modals .modal",
        modal_open: ".open-modal",
        modal_close: ".close-modal"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      /** @type {boolean} */
      window.user_engagement = false;
      self.methods._add("methods", {
        /**
         * @param {Object} obj
         * @param {string} deepDataAndEvents
         * @return {undefined}
         */
        open_modal: function (obj, deepDataAndEvents) {
          if (window.user_engagement = true, "undefined" == typeof deepDataAndEvents) {
            var $target = $(this);
            var id = $target.data("modal");
            if (!id) {
              return;
            }
            deepDataAndEvents = self.elements.modal.filter("#" + id);
          }
          if (deepDataAndEvents.length) {
            var cnl = self.elements.modal.filter(".open").length;
            if (cnl) {
              self.methods.close_modal();
              setTimeout(function () {
                self.methods.animate_open(deepDataAndEvents);
              }, 510);
            } else {
              self.methods.animate_open(deepDataAndEvents);
            }
          }
        },
        /**
         * @param {Node} deepDataAndEvents
         * @return {undefined}
         */
        animate_open: function (deepDataAndEvents) {
          self.elements.modals.css("display", "block");
          setTimeout(function () {
            self.elements.body.addClass("modal-open");
            deepDataAndEvents.addClass("open");
          }, 50);
        },
        /**
         * @return {undefined}
         */
        close_modal: function () {
          self.elements.body.removeClass("modal-open");
          setTimeout(function () {
            self.elements.modals.css("display", "none");
            self.elements.modal.removeClass("open");
          }, 300);
        },
        /**
         * @return {undefined}
         */
        interval_open: function () {
          /** @type {boolean} */
          var has_search_bar = Boolean(window.Cookies.get("daymond_first_time_user"));
          if (!window.user_engagement) {
            if (!has_search_bar) {
              console.log("pass");
              window.Cookies.set("daymond_first_time_user", true);
              self.methods.open_modal("", self.elements.modal.filter("#download"));
            }
          }
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "click.open_modal": {
          element: self.elements.modal_open,
          action: self.methods.open_modal
        },
        "click.close_modal": {
          element: self.elements.modal_close,
          action: self.methods.close_modal
        },
        esc_close_modal: {
          event: window.object_name + ".html_esc",
          element: self.elements.body,
          action: self.methods.close_modal
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      setTimeout(function () {
        n.methods.interval_open();
      }, 6E4);
      if (window.location.hash) {
        if ($(".modals " + window.location.hash).length) {
          n.methods.open_modal(null, $(window.location.hash));
        }
      }
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        sliders: ".slider",
        mobile_sliders: ".mobile-slider"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        vendors: {
          /**
           * @return {undefined}
           */
          _slider: function () {
            if (self.elements.sliders.length) {
              console.log("run");
              self.elements.sliders.not(".mobile-slider, .circle-slider").owlCarousel({
                singleItem: true,
                navigation: true,
                pagination: true,
                navigationText: ["R", "r"]
              });
              self.elements.sliders.filter(".circle-slider").owlCarousel({
                navigation: true,
                pagination: false,
                navigationText: ["R", "r"],
                itemsCustom: [
                  [0, 2],
                  [400, 3],
                  [768, 5]
                ]
              });
            }
          },
          /**
           * @return {undefined}
           */
          _mobile_slider: function () {
            if (self.elements.mobile_sliders.length) {
              var arg = self.elements.mobile_sliders.data("owlCarousel");
              if (window.innerWidth < 992) {
                if ("object" == typeof arg) {
                  return;
                }
                self.elements.mobile_sliders.owlCarousel({
                  singleItem: true,
                  navigation: true,
                  pagination: true,
                  navigationText: ["", "r"]
                });
              } else {
                if ("object" == typeof arg) {
                  self.elements.mobile_sliders.each(function () {
                    $(this).data("owlCarousel").destroy();
                  });
                }
              }
            }
          }
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "resize._mobile_slider": {
          element: self.elements.window,
          action: self.methods.vendors._mobile_slider
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.vendors._slider();
      n.methods.vendors._mobile_slider();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        _align_elements: function () {
          $('[data-layout="align-heights"]').each(function () {
            var $e = $(this);
            var res = $e.find('[data-ah="main-element"]');
            var data = $e.find('[data-ah="height-1"]');
            var c = $e.find('[data-ah="height-2"]');
            if (res.css("height", ""), data.css("height", ""), c.css("height", ""), !$e.hasClass("no-mobile-adjust") || !self.methods.mobile._is_mobile(991)) {
              var html = self.methods._calc_element_h(data);
              var h = self.methods._calc_element_h(c);
              /** @type {number} */
              var i = parseInt(c.css("marginTop"), 10);
              /** @type {number} */
              i = i ? i : 0;
              res.css("height", html + h + i);
              c.css("height", h - i);
            }
          });
        },
        /**
         * @param {?} collection
         * @return {?}
         */
        _calc_element_h: function (collection) {
          /** @type {number} */
          var computed = 0;
          return collection.each(function () {
            var $e = $(this);
            /** @type {number} */
            var current = parseInt($e.outerHeight(true), 10);
            if (current > computed) {
              /** @type {number} */
              computed = current;
            }
          }), computed;
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "resize._align_elements": {
          element: self.elements.window,
          action: self.methods._align_elements
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods._align_elements();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        location_indicator: ".location-indicator",
        location_indicator_links: ".location-indicator a",
        menu_links: ".menu .link"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      /** @type {boolean} */
      window.locating = false;
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        auto_locate_position: function () {
          if (!window.locating) {
            self.elements.location_indicator_links.each(function () {
              var $this = $(this);
              var target = $this.attr("href");
              var $target = $(target);
              if ($target.length) {
                var a = $target.offset().top;
                /** @type {number} */
                var b = 0.25 * window.innerHeight;
                if (window.scrollY > a - b) {
                  if (window.scrollY < a + $target.outerHeight() + b) {
                    self.elements.location_indicator_links.removeClass("active");
                    $this.addClass("active");
                    self.elements.menu_links.removeClass("active").filter(".link-" + target.substr(1, target.length)).addClass("active");
                  }
                }
              }
            });
          }
        },
        /**
         * @return {undefined}
         */
        locate_position: function () {
          /** @type {boolean} */
          window.locating = true;
          clearTimeout(window.setLocateTimeout);
          self.elements.location_indicator_links.removeClass("active");
          $(this).addClass("active");
          /** @type {number} */
          window.setLocateTimeout = setTimeout(function () {
            /** @type {boolean} */
            window.locating = false;
          }, 450);
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "scroll.auto_locate_position": {
          element: self.elements.window,
          action: self.methods.auto_locate_position
        },
        "resize.auto_locate_position": {
          element: self.elements.window,
          action: self.methods.auto_locate_position
        },
        "click.locate_position": {
          element: self.elements.location_indicator_links,
          action: self.methods.locate_position
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, n) {
      n.methods.auto_locate_position();
    });
  }(jQuery),
  function ($) {
    var $win = $(window);
    $win.on(window.object_name + "._cache_elements", function (dataAndEvents, self) {
      self.methods._add("elements", {
        social_wrapper: "#social",
        twitter_feed: "#social .twitter .content iframe",
        instagram_feed: "#social .instagram .content #instafeed"
      });
    });
    $win.on(window.object_name + ".add_methods", function (dataAndEvents, self) {
      self.methods._add("methods", {
        /**
         * @return {undefined}
         */
        align_social: function () {
          self.elements.twitter_feed = $("#social .twitter .content iframe");
          if (window.innerWidth <= 992) {
            self.elements.twitter_feed.css("height", 600);
          } else {
            self.elements.twitter_feed.css("height", self.elements.instagram_feed.outerHeight());
          }
        }
      });
    });
    $win.on(window.object_name + "._setup_events", function (dataAndEvents, self) {
      self.methods._add("events", {
        "resize.align_social": {
          element: self.elements.window,
          action: self.methods.align_social
        }
      });
    });
    $win.on(window.object_name + "._document_ready", function (dataAndEvents, api) {
      /** @type {boolean} */
      window.clear_int_align_social = false;
      /** @type {number} */
      window.align_social = setInterval(function () {
        if (api.elements.twitter_feed.length || 6 === api.elements.instagram_feed.find("img").length) {
          api.methods.align_social();
          if (!window.clear_int_align_social) {
            /** @type {number} */
            window.clear_int_align_social = setTimeout(function () {
              clearInterval(window.align_social);
            }, 1500);
          }
        }
      }, 100);
    });
  }(jQuery),
  function ($) {
    window[window.object_name] = {
      /**
       * @return {undefined}
       */
      initialize: function () {
        collection.trigger(window.object_name + ".initialize", self);
        collection.trigger(window.object_name + ".add_methods", self);
        $(document).ready(function () {
          self.document_ready();
        });
      },
      elements: {},
      properties: {},
      methods: {
        /**
         * @param {string} key
         * @param {?} opt_attributes
         * @return {undefined}
         */
        _add: function (key, opt_attributes) {
          jQuery.extend(true, self[key], opt_attributes);
        },
        /**
         * @param {undefined} values
         * @return {undefined}
         */
        _setup_events: function (values) {
          var n;
          for (n in values) {
            var EVENT_READY = "undefined" != typeof values[n].event ? values[n].event : n;
            if (values[n].data) {
              values[n].element.on(EVENT_READY, values[n].data, values[n].action);
            } else {
              values[n].element.on(EVENT_READY, values[n].action);
            }
          }
        },
        /**
         * @param {Object} f
         * @return {undefined}
         */
        _cache_elements: function (f) {
          var i;
          for (i in f) {
            f[i] = $(f[i]);
          }
        },
        vendors: {}
      },
      events: {},
      /**
       * @return {undefined}
       */
      document_ready: function () {
        collection.trigger(window.object_name + "._cache_elements", self);
        self.methods._cache_elements(self.elements);
        collection.trigger(window.object_name + "._setup_events", self);
        self.methods._setup_events(self.events);
        self.elements.window.trigger(window.object_name + "._document_ready", self);
      }
    };
    var self = window[window.object_name];
    var collection = $(window);
    window[window.object_name].initialize();
  }(jQuery);